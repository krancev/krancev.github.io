<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Hello World</title>
    <url>/2023/09/24/hello-world/</url>
    <content><![CDATA[<p>Welcome to <a class="link"   href="https://hexo.io/" >Hexo <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a>! This is your very first post. Check <a class="link"   href="https://hexo.io/docs/" >documentation <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a> for more info. If you get any problems when using Hexo, you can find the answer in <a class="link"   href="https://hexo.io/docs/troubleshooting.html" >troubleshooting <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a> or you can ask me on <a class="link"   href="https://github.com/hexojs/hexo/issues" >GitHub <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a>.</p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure></div>

<p>More info: <a class="link"   href="https://hexo.io/docs/writing.html" >Writing <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure></div>

<p>More info: <a class="link"   href="https://hexo.io/docs/server.html" >Server <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure></div>

<p>More info: <a class="link"   href="https://hexo.io/docs/generating.html" >Generating <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure></div>

<p>More info: <a class="link"   href="https://hexo.io/docs/one-command-deployment.html" >Deployment <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
]]></content>
  </entry>
  <entry>
    <title>Unity 2D</title>
    <url>/2023/09/24/Unity-2D/</url>
    <content><![CDATA[<h2 id="Unity-2D游戏（新手）"><a href="#Unity-2D游戏（新手）" class="headerlink" title="Unity 2D游戏（新手）"></a>Unity 2D游戏（新手）</h2><h3 id="一、新手操作"><a href="#一、新手操作" class="headerlink" title="一、新手操作"></a>一、新手操作</h3><h4 id="从输入中读取比例轴"><a href="#从输入中读取比例轴" class="headerlink" title="从输入中读取比例轴"></a>从输入中读取比例轴</h4><p>​	Edit -&gt; project setting -&gt; input manager</p>
<h4 id="设置瓦片"><a href="#设置瓦片" class="headerlink" title="设置瓦片"></a>设置瓦片</h4><p>​	windows -&gt; 2D -&gt; Tile Palette中创建瓦片地图</p>
<ul>
<li>瓦片：unity早期是可以创建瓦片的，但是到后期就可以直接用精灵了(sprite)。</li>
<li>瓦片地图</li>
</ul>
<h4 id="精灵"><a href="#精灵" class="headerlink" title="精灵"></a>精灵</h4><p>​	需要注意的事项有以下几点</p>
<ul>
<li>Texture Type ： Sprite(2D and UI)</li>
<li>Sprite Mode : single（单个瓦片是single），多个瓦片或者瓦片集就是multiple<ul>
<li>PixelsPerUnit(PPU)：这个熟悉需要非常注意，对于一个精灵，他的大小可能是64pixel，但是这里设置了100pixel，说明对于一个单位本应该是100像素，但是实际大小只占据了64像素，对于瓦片而言就存在空隙。</li>
</ul>
</li>
<li>Privot：如果需要在物理系统里面调节轴心，需要将这里的轴心改成center</li>
</ul>
<h4 id="预设体-Prefabs-："><a href="#预设体-Prefabs-：" class="headerlink" title="预设体(Prefabs)："></a>预设体(Prefabs)：</h4><p>​	只需要把拖入Hierarchy的物体重新拖入Project视图，就会变成一个预设体。对于一个预设体产生的物体而言，可以通过修改预设体修改所有相关的物体。减少了很多不必要的操作。</p>
<ul>
<li>Sprite Renderer：可以在预设体栏的精灵渲染器部分将<strong>Sprite Sort Point</strong>改成 Pivot（即看轴心）</li>
</ul>
<h4 id="传统的物体移动"><a href="#传统的物体移动" class="headerlink" title="传统的物体移动"></a>传统的物体移动</h4><div class="highlight-container" data-rel="C#"><figure class="iseeu highlight c#"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Unity都是由组件构成，每个物体一定有一个transform组件</span></span><br><span class="line"><span class="comment">// 对于每个物体而言，我们不能根据电脑的性能来决定物体移动的距离，所以 对于update函数而言（每帧调用一次）移动距离需要乘以每帧的时间</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">update</span>()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">// 从输入中读取数据</span></span><br><span class="line">    <span class="built_in">float</span> horizontal = Input.GetAxis(<span class="string">&quot;Horizontal&quot;</span>);</span><br><span class="line">    <span class="built_in">float</span> vertical = Input.GetAxis(<span class="string">&quot;Vertical&quot;</span>);</span><br><span class="line">    Vector2 position = transform.position;</span><br><span class="line">    position.x = position.x + <span class="number">3.0f</span> * horizontal * Time.deltaTime;</span><br><span class="line">    position.y = position.y + <span class="number">3.0f</span> * vertical * Time.deltaTime;</span><br><span class="line">    <span class="comment">// 分别是: 3.0f(N个单位距离) * 轴比例长度 * 帧时间</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<h3 id="二、物理系统"><a href="#二、物理系统" class="headerlink" title="二、物理系统"></a>二、物理系统</h3><p><strong>场景</strong>每帧移动的距离和实际上<strong>物理场景</strong>移动的距离是不一样的，物理世界是会将刚体按照物理规律验算一遍，最后将<strong>场景移动到物理场景所在位置</strong>。所以对于物理场景而言还有一个<strong>FixedUpdate</strong>函数。</p>
<ul>
<li><strong>Rigidbody 2D</strong> ：增加物理系统<ul>
<li>Constrains属性启用Freeze Rotation可以<strong>禁止物体的无意义旋转</strong></li>
</ul>
</li>
<li><strong>Box Collider 2D</strong>：增加碰撞体</li>
</ul>
<div class="highlight-container" data-rel="C#"><figure class="iseeu highlight c#"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">RubyController</span> : <span class="title">MonoBehaviour</span></span><br><span class="line">&#123;</span><br><span class="line">    Rigidbody2D rigidbody2d;</span><br><span class="line">    <span class="built_in">float</span> horizontal; </span><br><span class="line">    <span class="built_in">float</span> vertical;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 在第一次帧更新之前调用 Start</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">Start</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        rigidbody2d = GetComponent&lt;Rigidbody2D&gt;();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 每帧调用一次 Update</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">Update</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        horizontal = Input.GetAxis(<span class="string">&quot;Horizontal&quot;</span>);</span><br><span class="line">        vertical = Input.GetAxis(<span class="string">&quot;Vertical&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">FixedUpdate</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        Vector2 position = rigidbody2d.position;</span><br><span class="line">        position.x = position.x + <span class="number">3.0f</span> * horizontal * Time.deltaTime;</span><br><span class="line">        position.y = position.y + <span class="number">3.0f</span> * vertical * Time.deltaTime;</span><br><span class="line"></span><br><span class="line">        rigidbody2d.MovePosition(position);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>可以解决<strong>人物因为物理而生成的抖动的情况</strong>。</p>
<p>发生抖动是因为 <strong>物理系统</strong>使用的是<strong>场景</strong>的简化副本，这个副本中仅包含<strong>碰撞体</strong>。</p>
<p>此<strong>物理场景</strong>可以使<strong>物理系统</strong>的计算更简化，但是<strong>物理系统</strong>需要：</p>
<ul>
<li>每当带有<strong>刚体</strong>的<strong>游戏对象</strong>在<strong>场景</strong>中移动时，在物理<strong>场景</strong>中移动自己的<strong>游戏对象</strong>副本。</li>
<li>施加作用力并计算碰撞。</li>
<li>将<strong>场景</strong>中的<strong>游戏对象</strong>移动到物理<strong>场景</strong>中计算出的新位置。</li>
</ul>
<p>在此示例中，这会导致以下事件：</p>
<ul>
<li>你在帧更新过程中移动角色。</li>
<li><strong>物理系统</strong>将自己的游戏对象副本移到相应的新位置。</li>
<li><strong>物理系统</strong>发现角色<strong>碰撞体</strong>现在位于另一个<strong>碰撞体</strong>（此处为箱子）内，然后将角色碰撞体移回以便不再位于箱子内。</li>
<li><strong>物理系统</strong>将 <strong>Ruby 游戏对象</strong>与该新位置同步。</li>
</ul>
<p>你不断在箱子内移动 <strong>Ruby</strong>，而<strong>物理系统</strong>则将她移回。你要求代码执行的操作与<strong>物理系统</strong>执行的操作之间的这种冲突就会导致发生抖动。</p>
<p>要解决 Ruby 的抖动问题，你需要移动<strong>刚体</strong>本身而不是<strong>游戏对象变换组件</strong>，并让<strong>物理系统</strong>将<strong>游戏对象</strong>位置同步到<strong>刚体</strong>位置。这样，物理系统就可以在进入箱子<strong>之前</strong>停止移动，而不必在 <strong>Ruby</strong> 已经进入箱子<strong>之后</strong>再移动 Ruby。</p>
<h4 id="生命值系统"><a href="#生命值系统" class="headerlink" title="生命值系统"></a>生命值系统</h4><ol>
<li><p>为Ruby对象增加一个生命值血条变量</p>
</li>
<li><p>给加血物体增加<strong>Box Collider 2D的碰撞组件，并将Is Trigger设置为True</strong></p>
<p>现在，当你测试游戏时，角色将穿过生命值可收集对象。<strong>物理系统</strong>会记录此碰撞.</p>
</li>
<li><p>增加碰撞脚本</p>
<div class="highlight-container" data-rel="C#"><figure class="iseeu highlight c#"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">HealthCollectible</span> : <span class="title">MonoBehaviour</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">// 固定的函数写法</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">OnTriggerEnter2D</span>(<span class="params">Collider2D other</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        RubyController controller = other.GetComponent&lt;RubyController&gt;();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (controller != <span class="literal">null</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(controller.health  &lt; controller.maxHealth)</span><br><span class="line">            &#123;</span><br><span class="line">                controller.ChangeHealth(<span class="number">1</span>);</span><br><span class="line">                Destroy(gameObject);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div></li>
</ol>
<h4 id="属性：set和get"><a href="#属性：set和get" class="headerlink" title="属性：set和get"></a>属性：set和get</h4><p>通过set和get来<strong>设置</strong>和<strong>获取</strong>值</p>
<div class="highlight-container" data-rel="C#"><figure class="iseeu highlight c#"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="built_in">int</span> health &#123; <span class="keyword">get</span> &#123; <span class="keyword">return</span> currentHealth; &#125;&#125;</span><br></pre></td></tr></table></figure></div>

<h4 id="持续伤害"><a href="#持续伤害" class="headerlink" title="持续伤害"></a>持续伤害</h4><p>在角色组件的Rigidbody 2D组件的Sleeping mode设置为Neversleep</p>
<p>为了优化资源，<strong>物理系统</strong>在<strong>刚体</strong>停止移动时会停止计算刚体的碰撞；此时<strong>刚体</strong>进入“睡眠状态”。但在你这个情况中，你希望始终进行计算，因为即使在 Ruby 停止移动时也需要检测她是否受到伤害，因此你要指示<strong>刚体</strong>永远不要进入睡眠状态。</p>
<p>主要是需要设置一个无敌的时间，一个标志位和现在时间。</p>
<ol>
<li>在Update函数里,如果处于<strong>无敌状态</strong>，先将当前时间-帧时间：invincibleTimer -&#x3D; Time.deltaTime;如果小于0重置。</li>
</ol>
<div class="highlight-container" data-rel="C#"><figure class="iseeu highlight c#"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="built_in">float</span> timeInvincible = <span class="number">2.0f</span>;</span><br><span class="line"><span class="built_in">bool</span> isInvincible;</span><br><span class="line"><span class="built_in">float</span> invincibleTimer;</span><br></pre></td></tr></table></figure></div>

<h4 id="设置敌人"><a href="#设置敌人" class="headerlink" title="设置敌人"></a>设置敌人</h4><p>如果是<strong>伤害区域</strong>，直接设置<strong>触发器</strong>就行。函数也是<strong>OnTriggerStay2D</strong>和<strong>OnTriggerEnter2D</strong>.</p>
<p>如果是<strong>敌人</strong>，就不能设置触发器，而是直接用<strong>刚体碰撞 OnCollisionEnter2D</strong>。</p>
<p>另一个变化是，没有使用 <strong>other.GetComponent</strong>*，而是使用的<strong>other.gameObject.GetComponent</strong>。</p>
<p>这是因为此处的 other 类型是 <strong>Collision2D</strong>，而<strong>不是</strong> <strong>Collider2D</strong>。Collision2D 没有 <strong>GetComponent</strong> 函数，但是它包含大量有关碰撞的数据，例如与敌人碰撞的<strong>游戏对象</strong>。因此，在这个<strong>游戏对象</strong>上调用 <strong>GetComponent</strong>。</p>
<h3 id="三、精灵动画"><a href="#三、精灵动画" class="headerlink" title="三、精灵动画"></a>三、精灵动画</h3><ol>
<li><p>先在<strong>精灵</strong>的<strong>Prefab</strong>组件中增加一个<strong>Animator</strong>组件（不是Animation)</p>
</li>
<li><p>在<strong>Animation</strong>文件夹下创建一个<strong>Animation Controller</strong>，并将Controller赋给Animator组件</p>
</li>
<li><p>在<strong>Windows-&gt;Animation-&gt;Animation</strong>中打开面板，然后将精灵动画的关键帧拖入面板<strong>创建动画</strong></p>
</li>
<li><p>在<strong>WIndows-&gt;Animation-&gt;Animator</strong>创建<strong>Controller</strong></p>
</li>
<li><p>在<strong>Animator</strong>中删除现在有的动画，创建一个混合树<strong>Blend Tree</strong></p>
<ul>
<li>如果是2D动画，则在Parameters中创建两个参数</li>
<li>在Inspector面板中<strong>Add Motion Field</strong>，<strong>Type</strong>选择<strong>2D simlpeDirectional</strong>创建动画混合</li>
</ul>
</li>
<li><p>将<strong>参数</strong>从<strong>脚本</strong>传入<strong>Controller</strong></p>
<div class="highlight-container" data-rel="C#"><figure class="iseeu highlight c#"><table><tr><td class="code"><pre><span class="line"><span class="comment">//先创建Animator参数</span></span><br><span class="line">Animator animator;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Start</span>()</span></span><br><span class="line">&#123;</span><br><span class="line">    animator = GetComponent&lt;Animator&gt;();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//设置参数</span></span><br><span class="line">animator.SetFloat(<span class="string">&quot;Look X&quot;</span>, lookDirection.x);</span><br><span class="line">animator.SetFloat(<span class="string">&quot;Look Y&quot;</span>, lookDirection.y);</span><br><span class="line">animator.SetFloat(<span class="string">&quot;Speed&quot;</span>, move.magnitude);</span><br><span class="line">animator.SetTrigger(<span class="string">&quot;Hit&quot;</span>);</span><br></pre></td></tr></table></figure></div>

<h3 id=""><a href="#" class="headerlink" title=""></a></h3></li>
</ol>
<h4 id="创建自己的物理系统"><a href="#创建自己的物理系统" class="headerlink" title="创建自己的物理系统"></a>创建自己的物理系统</h4><ol>
<li><p>创建一个新的脚本</p>
</li>
<li><p>创建一个Rigidbody2D变量，在刚体存储在start函数里</p>
</li>
<li><p>然后创建一个名为 <strong>Launch</strong> 的函数。使用 <strong>Vector2 direction</strong> 作为参数，并使用 <strong>float force</strong>。你将使用这些参数来移动<strong>刚体</strong>：施加的力越大，移动速度就越快</p>
</li>
<li><p>因为你要检测碰撞，所以需要一个 <strong>OnCollisionEnter</strong> 函数。</p>
<p>目前只是<strong>销毁 (Destroy)</strong> 对象</p>
</li>
</ol>
<h4 id="发射子弹"><a href="#发射子弹" class="headerlink" title="发射子弹"></a>发射子弹</h4><div class="highlight-container" data-rel="C#"><figure class="iseeu highlight c#"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Launch</span>()</span></span><br><span class="line">&#123;</span><br><span class="line">    GameObject projectileObject = Instantiate(projectilePrefab, </span><br><span class="line">    rigidbody2d.position + Vector2.up * <span class="number">0.5f</span>, Quaternion.identity);</span><br><span class="line"></span><br><span class="line">    Projectile projectile = projectileObject.GetComponent&lt;Projectile&gt;();</span><br><span class="line">    projectile.Launch(lookDirection, <span class="number">300</span>);</span><br><span class="line"></span><br><span class="line">    animator.SetTrigger(<span class="string">&quot;Launch&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<h4 id="问题：和自己发生碰撞"><a href="#问题：和自己发生碰撞" class="headerlink" title="*问题：和自己发生碰撞"></a>*问题：和自己发生碰撞</h4><ul>
<li><p><strong>如果使用代码创建实体，则一些初始化操作不要放在Start函数里面，调用实体时候不会调用这个函数。要放在Awake函数里面</strong>。</p>
<p>​	与 <strong>Start</strong> 刚好相反，在创建对象时（调用 <strong>Instantiate</strong> 时）就会立即调用 <strong>Awake</strong>，因此在调用 <strong>Launch</strong> 之前已正确初始化 <strong>Rigidbody2d</strong>。</p>
</li>
<li><p>要解决和自己碰撞的问题，和<strong>图层和碰撞</strong>有关</p>
<p>​	要修复这个碰撞问题，正确方法是使用<strong>图层</strong>。<strong>图层</strong>可将<strong>游戏对象</strong>分组在一起，以便可以对它们进行筛选。你的目标是创建一个<strong>角色图层</strong>来放入 <strong>Ruby 游戏对象</strong>，然后创建一个<strong>飞弹图层</strong>来放入所有飞弹。</p>
<p>​	然后可以告诉<strong>物理系统</strong>，<strong>角色图层</strong>和<strong>飞弹图层</strong>不能碰撞，因此物理系统将忽略这些图层中的对象之间的所有碰撞。</p>
<p><strong>在一下设置中取消掉相互之间的碰撞</strong><br><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/images/Unity2D/Unity2D_0.png"
                      alt="Text"
                ></p>
</li>
</ul>
<h3 id="四、虚拟相机：Cinemachine"><a href="#四、虚拟相机：Cinemachine" class="headerlink" title="四、虚拟相机：Cinemachine"></a>四、虚拟相机：Cinemachine</h3><ol>
<li><p>创建相机：</p>
<p>​	首先需要在<strong>windows -&gt; package manager</strong>中导入Cinemachine的包（导入完成后会在顶部菜单栏GameObject中显示），调用<strong>GameObject -&gt; Cinemachine -&gt; 2D Camera</strong>就会创建一个虚拟摄像机</p>
</li>
<li><p>将摄像机跟随角色移动</p>
<p>在<strong>Cinemachine Virtual Camera的Follow</strong>中选择ruby组件</p>
</li>
<li><p>让摄像机不在超过世界之外</p>
<p>​		需要创建一个空物体（命名为CameraConfiner）</p>
<ul>
<li><p><strong>空物体增加一个Polygon Collider 2D组件</strong>，并编辑组件大小（<strong>拉边可以增加顶点，按住ctrl再点击边可以删除边</strong>）</p>
</li>
<li><p>虚拟相机在<strong>Cinemachine Virtual Camera</strong>的<strong>Extensions -&gt; Add Extension</strong>中选择<strong>Add Cinemachine Confiner</strong>，并将空物体赋值给<strong>Bounding shape 2D</strong></p>
<p>但是以上设置之后会把所有有物理的物体推到世界之外。</p>
</li>
</ul>
</li>
<li><p>解决上面问题需要用到图层</p>
<p>​	要将角色带回<strong>场景</strong>中，需要使用**图层 (Layers)**，就像在上一教程中对飞弹进行的操作一样。但在这里我们也简要提醒一下所需的步骤：</p>
<ol>
<li><p>在 Inspector 的右上角，单击 <strong>Layer</strong> 下拉选单，然后选择 <strong>Edit Layer</strong>。</p>
</li>
<li><p>选择一个空字段并将其命名为 <strong>Confiner</strong>。</p>
</li>
<li><p>在 <strong>Confiner 游戏对象</strong>上，将 Layer 下拉选单设置为 <strong>Confiner</strong>。</p>
<p>​	选择 <strong>Edit &gt; Project Settings &gt; Physics 2D</strong>，然后取消勾选 <strong>Confiner</strong> <strong>图层</strong>中的所有条目</p>
<p> <img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/images/Unity2D/Unity2D_1.png"
                      alt="Text"
                ></p>
</li>
</ol>
</li>
</ol>
<h3 id="五、粒子系统"><a href="#五、粒子系统" class="headerlink" title="五、粒子系统"></a>五、粒子系统</h3><p>在Create中，Effect -&gt; Particle System中创建一个粒子系统。</p>
<p>常用属性有：</p>
<ul>
<li>Start Lifetime</li>
<li>Start Speed</li>
<li>Start Size</li>
</ul>
<p>常用的展开属性有：</p>
<ul>
<li><p>Shape</p>
</li>
<li><p>Color over Lifetime : 让粒子随着存活时间而改变透明度消失</p>
</li>
<li><p>Size over Lifetime: 类似上面</p>
</li>
<li><p>Texture Sheet Animation ：在这里添加粒子的图像</p>
</li>
</ul>
<h3 id="六、UI界面"><a href="#六、UI界面" class="headerlink" title="六、UI界面"></a>六、UI界面</h3><ol>
<li><p>设置UI界面</p>
<ul>
<li>在Create中创建UI-&gt;Image（调节锚点和轴心，如果使用Alt + 点击固定锚点配置，则会将子对象填充父对象，例如HP填充HP遮罩）</li>
<li>Mask遮罩，也是一个UI的Image + Mask组件（注意子对象本身Rect transfrom要在左上角，再按了alt+点击锚点填充）</li>
</ul>
</li>
<li><p>编写HP代码</p>
<ul>
<li><p>使用静态变量，但是静态变量有一个缺点</p>
<p>​	如果<strong>场景</strong>中有两个生命值条，则第二个生命值条也会将自身存储在静态成员中，并替换第一个生命值条。因此，<strong>UIHealthBar.instance</strong> 将始终返回第二个生命值条，而始终不返回第一个。这就是为什么将这种特定设置称为<strong>单例</strong>，因为只能存在一个该类型的对象。这正是你这种情况下想要的结果：只有一个<strong>生命值条</strong>。</p>
</li>
</ul>
</li>
</ol>
<h4 id="世界交互：对话射线投射"><a href="#世界交互：对话射线投射" class="headerlink" title="世界交互：对话射线投射"></a>世界交互：对话射线投射</h4><p>​	可以在青蛙角色的前面放置一个触发器，如果 Ruby 走到这个触发器上，则对话开始。但这意味着 Ruby 可能会转过脸背对青蛙，而仍能与青蛙对话。为避免此问题，你可以改用<strong>物理系统</strong>功能“<strong>射线投射</strong>”，这个功能在交互式应用程序中非常有用。</p>
<p><strong>射线投射</strong>是将射线投射到<strong>场景</strong>中并检查该射线是否与<strong>碰撞体</strong>相交的行为。射线具有起点、方向和长度。之所以使用射线“投射”这种说法，是因为要从射线的起点一直到终点进行测试。</p>
<div class="highlight-container" data-rel="C#"><figure class="iseeu highlight c#"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> (Input.GetKeyDown(KeyCode.X))</span><br><span class="line">&#123;</span><br><span class="line">    RaycastHit2D hit = Physics2D.Raycast(rigidbody2d.position + Vector2.up * <span class="number">0.2f</span>, lookDirection, <span class="number">1.5f</span>, LayerMask.GetMask(<span class="string">&quot;NPC&quot;</span>));</span><br><span class="line">    <span class="keyword">if</span> (hit.collider != <span class="literal">null</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        Debug.Log(<span class="string">&quot;Raycast has hit the object &quot;</span> + hit.collider.gameObject);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>​	首先，你将声明一个类型为 <strong>RaycastHit2D</strong> 的新变量。此变量存储由 <strong>Physics2D.Raycast</strong> 提供的 <strong>Raycast</strong> 的结果。<strong>Physics2D.Raycast</strong> 有多种版本（要了解所有变体，可以看看<a class="link"   href="https://docs.unity3d.com/ScriptReference/Physics2D.Raycast.html" >脚本 API <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a>），但我们在这里使用的版本有四个参数：</p>
<p><strong>1.</strong> 你的示例中的起点是从 Ruby 的位置向上偏移，因为你想从 Ruby 精灵中心进行测试，而不是从她的双脚。</p>
<p><strong>2.</strong> 方向，这是 Ruby 注视的方向。</p>
<p><strong>3.</strong> 射线的最大距离应设置为 <strong>1.5</strong>，这样<strong>射线投射</strong>不会测试相距起点 <strong>1.5</strong> 个单位的相交点。</p>
<p><strong>4.</strong> 一个图层遮罩，允许我们仅测试某些图层。在相交测试期间，所有不属于遮罩的图层都将被忽略。在这里，你将选择 <strong>NPC 图层</strong>，因为该图层包含你的青蛙。</p>
<p>最后，测试一下你的<strong>射线投射</strong>是否命中了<strong>碰撞体</strong>。如果<strong>射线投射</strong>没有与任何对象相交，则为 null，因此不执行任何操作。否则，<strong>RaycastHit2D</strong> 将包含与<strong>射线投射</strong>相交的<strong>碰撞体</strong>，这样你将进入最后的 <strong>if 代码块</strong>，以记录刚刚通过<strong>射线投射</strong>找到的对象。</p>
<h4 id="UI文本"><a href="#UI文本" class="headerlink" title="UI文本"></a>UI文本</h4><ol>
<li><p>创建一个世界的<strong>画布</strong>，在对象上右键创建画布，在 <strong>Hierarchy</strong> 中选择 <strong>Canvas</strong> 后，转到 Inspector 并将 <strong>Render Mode</strong> 更改为 <strong>World Space</strong>。</p>
</li>
<li><p>缩放<strong>画布</strong>，以便减小<strong>场景</strong>中的大小，但将画布宽度和高度保持为正确的像素值。</p>
<p>设置 <strong>Rect Transform</strong> 值：</p>
<ul>
<li><strong>Pos X</strong> 和 <strong>Pos Y</strong> 设置为 <strong>0</strong></li>
<li><strong>Width</strong> 设置为 <strong>300</strong>，<strong>Height</strong> 设置为 <strong>200</strong></li>
<li>然后将 <strong>Scale</strong> 的 <strong>X</strong>、<strong>Y</strong> 和 <strong>Z</strong> 设置为 <strong>0.01</strong>：</li>
</ul>
</li>
</ol>
<p>​	在 <strong>Hierarchy</strong> 中右键单击 Image <strong>游戏对象</strong>，然后选择 <strong>UI</strong> <strong>&gt;</strong>  <strong>Text - TextMeshPro</strong>。单击 <strong>Import TMP Essentials</strong>。导入完成后（<strong>Import TMP Essential</strong> 按钮灰显），便可以关闭该窗口。文本现在就创建好了。</p>
<p>​	就像之前对图像所做的一样，在<strong>按住 Alt 的同时单击扩展锚点控制柄</strong>以将文本扩展到图像的整个尺寸。</p>
<h3 id="七、音频"><a href="#七、音频" class="headerlink" title="七、音频"></a>七、音频</h3><p>Unity 声音系统包括：</p>
<p><strong>1.</strong> <strong>音频剪辑</strong></p>
<p>​	与纹理或脚本一样，<strong>音频剪辑</strong>也是<strong>资源</strong>。你可以从音频文件（例如 mp3、ogg 和 wav 文件）导入<strong>音频剪辑</strong>，然后就会存放在 Project 文件夹中。你可以在 <strong>Audio 文件夹</strong>中找到本教程项目所需的<strong>音频剪辑</strong>。</p>
<p><strong>2.音频监听器</strong></p>
<p>​	<strong>音频监听器</strong>是一个组件，可以定义“监听器”在<strong>场景</strong>中的位置。使用<strong>空间化</strong>声音时，此功能很有用。注：空间化声音是一种利用左&#x2F;右扬声器（甚至在某些安装中使用前&#x2F;后扬声器）上播放的声音，给玩家一种环绕声的感觉。</p>
<p>​	默认情况下，监听器位于<strong>摄像机</strong>上，因为玩家希望从摄像机的位置听到声音，所以屏幕右侧的声音应在右侧扬声器上播放。</p>
<p>​	如果在 <strong>Hierarchy</strong> 中单击 <strong>Camera</strong>，可以看到上面有一个 <strong>Audio Listener</strong> 组件。</p>
<p><strong>3.</strong> <strong>音频源</strong></p>
<p>​	音频源 (Audio Source) 是一个组件，可以在该组件所在的<strong>游戏对象</strong>的位置播放<strong>音频剪辑</strong>。音频源的位置是相对于<strong>音频监听器</strong>的位置，这让<strong>音频系统</strong>可以混合声音，以便可以产生正确的空间感（如果我们使用空间化声音）。</p>
<p>​	即使不使用空间化声音，例如对于背景音乐，仍然可以在<strong>游戏对象</strong>上使用<strong>音频源</strong>，因为这样可以播放声音。</p>
<h4 id="背景音乐"><a href="#背景音乐" class="headerlink" title="背景音乐"></a>背景音乐</h4><p><strong>1.<strong>创建一个空的</strong>游戏对象</strong>，将其命名为 <strong>BackgroundMusic</strong>，并为其添加一个 <strong>Audio Source</strong> 组件。</p>
<p><strong>2.将项目的 Audio 文件夹</strong>中名为 <strong>2D MUSIC LOOP</strong> 的音频剪辑拖放到 <strong>AudioClip</strong> 属性字段中。</p>
<p><strong>3.务必</strong>选中 <strong>Loop</strong> 选项，这样可以让音乐从头到尾不断循环播放。</p>
<p><strong>4.检查 Spatial Blend</strong> 滑动条，该滑动条可以从 <strong>2D</strong>（左侧）滑动到 <strong>3D</strong>（右侧）。</p>
<p>​	此设置定义了声音是否空间化。如果滑动条完全在 <strong>2D</strong> 一侧，则声音不会被空间化，无论<strong>音频监听器</strong>在哪里，声音都将以相同的音量播放。</p>
<p>这有点像在音乐播放器中听音乐，并在音乐中设置了立体声。如果滑动条完全在 <strong>3D</strong> 一侧，则声音将在左右扬声器中以不同音量播放，具体取决于<strong>音频源</strong>相对于<strong>音频监听器</strong>的位置。</p>
<p>由于你的音乐需要在任何地方都听到相同的声音，因此请确保滑动条完全在 <strong>2D</strong> 一侧。目前暂时可以忽略其他属性。</p>
<p><strong>5.<strong>现在进入</strong>运行模式</strong>，你在游戏开始后应该会立即听到音乐开始播放。如果音量太大，可以随时用音量滑动条来尝试不同音量。</p>
<p><strong>注意：</strong>切记，<strong>退出运行模式后</strong>，你在游戏运行过程中所做的任何更改都将被“撤销”，因此请确保记下要使用的值并在退出<strong>运行模式</strong>后调整设置。</p>
<p>**6.**如果在开发过程中由于任何原因需要使所有声音静音，请单击 <strong>Game 视图</strong>右上角的 <strong>Mute Audio</strong> 按钮。如果在应该听到声音时却听不到任何声音，可以看看是否启用了此按钮。</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/images/Unity2D/Unity2D_2.png"
                      alt="Text"
                ></p>
<p>！！！！为什么在 Ruby 上使用<strong>音频源</strong>，而不是在可收集对象上使用？很简单，因为<strong>音频源 (Audio Source)</strong> 是一个组件。当 Ruby 拾取了可收集对象后，这个可收集对象就被销毁了。这时也将销毁<strong>音频源</strong>并停止播放声音。</p>
<p>通过<strong>音频源</strong>在 Ruby 上播放声音，即使可收集对象被销毁，也可以播放声音。</p>
<h4 id="空间化声音"><a href="#空间化声音" class="headerlink" title="空间化声音"></a>空间化声音</h4><ol>
<li>将<strong>AudioSource组件</strong>的<strong>Spatial Blend</strong>从2D调整到3D</li>
<li>在组件的<strong>3D Sound Settings</strong>中设置<strong>Min Distance和Max Distance</strong></li>
<li>由于对于3D来说，是个球的空间大小。而摄像机位置不在球内，所以需要给摄像机设置一个空的子物体Listener，将摄像机的Audio Listener防止在空物体上。空物体在世界空间Z &#x3D; 0的平面上</li>
</ol>
<h3 id="八、打包游戏：发布啦！"><a href="#八、打包游戏：发布啦！" class="headerlink" title="八、打包游戏：发布啦！"></a>八、打包游戏：发布啦！</h3><p>​	<strong>1.</strong> 要在 Unity 中构建应用程序，请选择 <strong>File &gt; Build Settings</strong> 以打开 Build 窗口</p>
<p>​	<strong>2.<strong>顶部的 <strong>Scenes In Build</strong> 部分会列出游戏中将包含的所有</strong>场景</strong>。你可以在<strong>项目</strong>中拥有只用于测试功能或仅用于调试的<strong>场景</strong>，因此 <strong>Unity</strong> 需要知道最终产品中应包括哪些场景。</p>
<p>​	<strong>3.<strong>如果主</strong>场景</strong>仍处于打开状态，只需单击 <strong>Add Open Scenes</strong> 以将该场景添加到列表中。或者，也可以将<strong>场景</strong>从 <strong>Project 窗口</strong>拖放到 <strong>Build Settings 窗口</strong>的这个部分。</p>
<p>​	<strong>4.<strong>在左下方的 <strong>Platform</strong> 部分中选择要在哪个平台上运行游戏。默认情况下，</strong>编辑器</strong>仅支持安装该程序的平台。要安装更多平台，请打开 <strong>Unity Hub</strong>，单击 <strong>Installs</strong>，单击相关 <strong>Unity</strong> 版本旁边的三个点，单击 <strong>Add Component</strong>，然后选择平台。</p>
<p>​	<strong>5.<strong>最后，右下角是与当前所选</strong>平台</strong>相关的设置。这些设置主要用于调试或特殊构建，因此你现在可以忽略大部分的这些设置。</p>
]]></content>
      <tags>
        <tag>Untiy</tag>
      </tags>
  </entry>
  <entry>
    <title>Unity 3D</title>
    <url>/2023/09/24/Unity-3D/</url>
    <content><![CDATA[<h1 id="Unity3D-RPG"><a href="#Unity3D-RPG" class="headerlink" title="Unity3D RPG"></a>Unity3D RPG</h1><h2 id="一、创建URP"><a href="#一、创建URP" class="headerlink" title="一、创建URP"></a>一、创建URP</h2><h3 id="1）设置URP"><a href="#1）设置URP" class="headerlink" title="1）设置URP"></a>1）设置URP</h3><ol>
<li><p>在Package Manager中安装Universal RP，下载URP</p>
</li>
<li><p>在Project中创建Renderding -&gt; URP Asset(with Universal Renderer)</p>
<p>![image-20230907212142278](Unity3D RPG</p>
<h2 id="一、创建URP-1"><a href="#一、创建URP-1" class="headerlink" title="一、创建URP"></a>一、创建URP</h2><h3 id="1）设置URP-1"><a href="#1）设置URP-1" class="headerlink" title="1）设置URP"></a>1）设置URP</h3><ol>
<li><p>在Package Manager中安装Universal RP，下载URP</p>
</li>
<li><p>在Project中创建Renderding -&gt; URP Asset(with Universal Renderer)</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/images/Unity3D%5Cimage-20230907212142278.png"
                      alt="image-20230907212142278"
                ></p>
</li>
<li><p>在Project Settings：</p>
<ul>
<li><p>Graphics：</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/images/Unity3D%5Cimage-20230907212230239.png"
                      alt="image-20230907212230239"
                ></p>
</li>
<li><p>Quality</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/images/Unity3D%5Cimage-20230907212245575.png"
                      alt="image-20230907212245575"
                ></p>
</li>
</ul>
</li>
</ol>
<p>需要注意，下载的Package Manager里面的素材都需要支持URP版本，在素材中选择相应的URP版本。</p>
<h3 id="2）升级当前场景的URP（正确显示模型纹理）"><a href="#2）升级当前场景的URP（正确显示模型纹理）" class="headerlink" title="2）升级当前场景的URP（正确显示模型纹理）"></a>2）升级当前场景的URP（正确显示模型纹理）</h3><p>在Windows -&gt; Rendering -&gt; Render Pipeline Converter中选择Bulit-in的前两项，Initialize Converters后Convert Assets</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/images/Unity3D%5Cimage-20230907212640407.png"
                      alt="image-20230907212640407"
                ></p>
<h2 id="二、创建植被或地面-PolyBrush-Probuilder"><a href="#二、创建植被或地面-PolyBrush-Probuilder" class="headerlink" title="二、创建植被或地面(PolyBrush &#x2F; Probuilder)"></a>二、创建植被或地面(PolyBrush &#x2F; Probuilder)</h2><h3 id="1、PolyBrush"><a href="#1、PolyBrush" class="headerlink" title="1、PolyBrush"></a>1、PolyBrush</h3><p>​	在Package Manager里面下载组件之后可以刷植被</p>
<h3 id="2、ProBuilder"><a href="#2、ProBuilder" class="headerlink" title="2、ProBuilder"></a>2、ProBuilder</h3><p>​	创建地面</p>
<h3 id="3、ProGrids（不常用）"><a href="#3、ProGrids（不常用）" class="headerlink" title="3、ProGrids（不常用）"></a>3、ProGrids（不常用）</h3><ul>
<li><p>首先在Edit -&gt; project settings中启用</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/images/Unity3D%5Cimage-20230907213652201.png"
                      alt="image-20230907213652201"
                ></p>
</li>
<li><p>在Package Manager中下载</p>
</li>
</ul>
<h2 id="三、烘焙地图（AI导航系统）"><a href="#三、烘焙地图（AI导航系统）" class="headerlink" title="三、烘焙地图（AI导航系统）"></a>三、烘焙地图（AI导航系统）</h2><p>先在Window -&gt; AI -&gt; Navigatoin中打开导航</p>
<h3 id="1）静态地图障碍物"><a href="#1）静态地图障碍物" class="headerlink" title="1）静态地图障碍物"></a>1）静态地图障碍物</h3><ol>
<li><p>将地面在Inspector界面中的static设置为Navigation Static</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/images/Unity3D%5Cimage-20230907223726816.png"
                      alt="image-20230907223726816"
                ></p>
</li>
<li><p>设置Tree的static</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/images/Unity3D%5Cimage-20230907223739749.png"
                      alt="image-20230907223739749"
                ></p>
</li>
<li><p>给<strong>人物</strong>增加一个Nav Mesh Agent的组件</p>
<p>设置好大小之后：</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/images/Unity3D%5Cimage-20230907223909569.png"
                      alt="image-20230907223909569"
                ></p>
<p>需要在Navigation的Bake中调节相应的参数</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/images/Unity3D%5Cimage-20230907223954881.png"
                      alt="image-20230907223954881"
                ></p>
</li>
</ol>
<h3 id="2）动态地图障碍物"><a href="#2）动态地图障碍物" class="headerlink" title="2）动态地图障碍物"></a>2）动态地图障碍物</h3><p>对于某个移动的东西</p>
<p>​	对<strong>任意一个物体</strong>增加一个<strong>Nav Mesh Obstacle</strong>的组件，</p>
<h2 id="四、人物按照导航移动（UnityEngine-Events）"><a href="#四、人物按照导航移动（UnityEngine-Events）" class="headerlink" title="四、人物按照导航移动（UnityEngine.Events）"></a>四、人物按照导航移动（UnityEngine.Events）</h2><h3 id="1、非单例模式事件"><a href="#1、非单例模式事件" class="headerlink" title="1、非单例模式事件"></a>1、非单例模式事件</h3><p>主要使用了UnityEvent<Vector3>的类</p>
<ol>
<li>首先需要引用UnityEngine.Events事件</li>
<li>创建一个UnityEvent<Vector3>的类，并在继承MonoBehaviour的子类中创建变量。</li>
<li>注意：这里需要使用[System.Serializable]才能在Unity中看到暴露出来的变量。</li>
</ol>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/images/Unity3D%5Cimage-20230908101905259.png"
                      alt="image-20230908101905259"
                ></p>
<div class="highlight-container" data-rel="C#"><figure class="iseeu highlight c#"><table><tr><td class="code"><pre><span class="line"><span class="keyword">using</span> System.Collections;</span><br><span class="line"><span class="keyword">using</span> System.Collections.Generic;</span><br><span class="line"><span class="keyword">using</span> UnityEngine;</span><br><span class="line"><span class="keyword">using</span> UnityEngine.Events;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Important to show</span></span><br><span class="line"><span class="comment">// ****************************************</span></span><br><span class="line">[<span class="meta">System.Serializable</span>]</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">EventVector3</span> : <span class="title">UnityEvent</span>&lt;<span class="title">Vector3</span>&gt;&#123;&#125;</span><br><span class="line"><span class="comment">// ****************************************</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">MouseManager</span> : <span class="title">MonoBehaviour</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> EventVector3 OnMouseClicked;</span><br><span class="line">    RaycastHit hitInfo;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// Update is called once per frame</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">Update</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        SetCursorTexture();</span><br><span class="line">        MouseControl();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">SetCursorTexture</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        Ray ray = Camera.main.ScreenPointToRay(Input.mousePosition);</span><br><span class="line">        <span class="keyword">if</span>(Physics.Raycast(ray, <span class="keyword">out</span> hitInfo))&#123;</span><br><span class="line">            <span class="comment">// 切换鼠标贴图</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Mouse Control</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">MouseControl</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">// 鼠标左键为0,并且点击不为空</span></span><br><span class="line">        <span class="keyword">if</span>(Input.GetMouseButtonDown(<span class="number">0</span>) &amp;&amp; hitInfo.collider != <span class="literal">null</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(hitInfo.collider.gameObject.CompareTag(<span class="string">&quot;Ground&quot;</span>))&#123;</span><br><span class="line">                OnMouseClicked?.Invoke(hitInfo.point);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>主要代码为：</p>
<div class="highlight-container" data-rel="C#"><figure class="iseeu highlight c#"><table><tr><td class="code"><pre><span class="line"><span class="keyword">using</span> UnityEngine.Events;</span><br><span class="line">[<span class="meta">System.Serializable</span>]</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">EventVector3</span> : <span class="title">UnityEvent</span>&lt;<span class="title">Vector3</span>&gt;&#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">MouseManager</span> : <span class="title">MonoBehaviour</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> MouseManager Instance;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>人物导航的基本属性：</p>
<ul>
<li>Angular Speed：转角速度，人物在旋转时候的旋转速度</li>
<li>Stoppint Distance：是距离物体多远的距离停下，一般人物手中持有不同的武器就可以设置不同的停止距离</li>
<li>Auto Braking：给人物设置一下缓慢停下来的过程。</li>
</ul>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/images/Unity3D%5Cimage-20230908104104983.png"
                      alt="image-20230908104104983"
                ></p>
<ul>
<li>使用NavMeshAgent的类，需要在前面<strong>using UnityEngine.AI</strong></li>
</ul>
<h2 id="五、将函数注册到Event的中不使用拖拽的方式"><a href="#五、将函数注册到Event的中不使用拖拽的方式" class="headerlink" title="五、将函数注册到Event的中不使用拖拽的方式"></a>五、将函数注册到Event的中不使用拖拽的方式</h2><p>需要将MouseManger修改成一个单例模式</p>
<h3 id="单例模式"><a href="#单例模式" class="headerlink" title="单例模式"></a>单例模式</h3><ul>
<li>MouseManger：设置为单例模式的类</li>
</ul>
<div class="highlight-container" data-rel="C#"><figure class="iseeu highlight c#"><table><tr><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">MouseManager</span> : <span class="title">MonoBehaviour</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">// set static parameters</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> MouseManager Instance;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">event</span> Action&lt;Vector3&gt; OnMouseClicked;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">Awake</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(Instance != <span class="literal">null</span>)</span><br><span class="line">            Destory(gameObject);</span><br><span class="line">        Instance = <span class="keyword">this</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<ul>
<li><p>PlayController：必须要设置一个和OnMouseClicked的输入类型一样的函数</p>
<div class="highlight-container" data-rel="C#"><figure class="iseeu highlight c#"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 增加订阅的方式 ：+=</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Start</span>()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">// 将函数注册进去</span></span><br><span class="line">    MouseManager.Instance.OnMouseClicked += MoveToTarget;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 定义函数，输入类型Vector3要与Action&lt;Vector3&gt;保持一致</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">MoveToTarget</span>(<span class="params">Vector3 target</span>)</span>&#123;</span><br><span class="line">        agent.destination = target;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div></li>
</ul>
<p>游戏运行时，<strong>会触发所有在MouseManger里面注册的函数</strong>（在每个Controller中进行响应的函数注册）</p>
<h2 id="六、CinaMarchine"><a href="#六、CinaMarchine" class="headerlink" title="六、CinaMarchine"></a>六、CinaMarchine</h2><ol>
<li><p>在Package Manager中下载CinaMarchine之后</p>
</li>
<li><p>固定视角：在GameObject的CinaMarchine中创建一个Virtual Camera</p>
<ul>
<li>Follow：选择要跟随的角色</li>
<li>Body：选择Framing Transposer</li>
<li>Aim：选择Nothing</li>
</ul>
</li>
<li><p>转动视角（非固定视角）FreeLook</p>
</li>
</ol>
<h2 id="七、增加雾效-后处理"><a href="#七、增加雾效-后处理" class="headerlink" title="七、增加雾效&#x2F;后处理"></a>七、增加雾效&#x2F;后处理</h2><ul>
<li><p>雾效</p>
<p>Window -&gt; Rendering -&gt; Lighting -&gt; Enviroments -&gt; Other Settings -&gt; Fog</p>
</li>
<li><p>后处理</p>
<p>场景升级为URP自带后处理（Post-Processing)。直接在Hierachy中右键创建Volume。并在Profile中创建new。并在Main Camera的Camera中启用post-processing</p>
</li>
</ul>
<h2 id="八、动画"><a href="#八、动画" class="headerlink" title="八、动画"></a>八、动画</h2><ol>
<li>添加Animator组件</li>
<li>创建一个Animation Controller并赋值给角色Animator组件</li>
<li>打开创建的PlayController，创建一个Blend Tree（动画混合树）打开Blend Tree，在右侧添加Add Motion Fields，并在Parameter选择Speed（左侧创建Speed变量）。</li>
<li>在角色代码里获取Animator组件的变量，并使用SetFloat将导航的速度传给动画的Speed，完成动画效果。</li>
</ol>
<h2 id="九、Shader-Graph"><a href="#九、Shader-Graph" class="headerlink" title="九、Shader Graph"></a>九、Shader Graph</h2><p>​	在<strong>人物</strong>在<strong>被遮挡的物体</strong>后面实现<strong>遮挡剔除</strong>的效果。<strong>人物在树之后</strong>的时候<strong>显示人物轮廓</strong></p>
<ol>
<li><p>创建Shader Graph：在Project中Create -&gt; Shader Graph -&gt;URP -&gt; Unlit Shader Graph</p>
<p>这里就是连连看的Shader渲染</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/images/Unity3D%5Cimage-20230908135850939.png"
                      alt="image-20230908135850939"
                ></p>
</li>
<li><p>然后再URP的Setting中进行设置，首先打开Universal Render Pipeline Asset_Renderer</p>
<ul>
<li><p>在Add Renderer Feature中选择Render Object(Exprimental)</p>
</li>
<li><p>添加两个Render Feature：一个前景，一个背景</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/images/Unity3D%5Cimage-20230908140905243.png"
                      alt="image-20230908140905243"
                ></p>
</li>
</ul>
<p>一个地图走到树中间时，点击树，并不会走到树遮挡到的路的位置。有两种方法：</p>
<p>1）直接让树忽略射线，先选中所有的树，在Layer中选择2: Ignore Raycast</p>
<p>2）选中所有的树，关闭掉所有的Mesh Collider</p>
</li>
</ol>
<h2 id="十、设置敌人"><a href="#十、设置敌人" class="headerlink" title="十、设置敌人"></a>十、设置敌人</h2><p>尝试把同一个<strong>脚本自动挂载</strong>到<strong>敌人</strong>身上</p>
<ol>
<li><p>创建一个Enemy Controller的Scripts</p>
</li>
<li><p>增加代码**[RequireComponent(typeof(NavMeshAgent))]<strong>，</strong>挂载该代码<strong>就会</strong>自动<strong>将</strong>NavMeshAgent组件挂载**上去。</p>
<ul>
<li><p>这里需要注意的是，如果是要更改<strong>鼠标所指位置的图标</strong>，<strong>需要</strong>不同物体的<strong>标签标记</strong></p>
<blockquote>
<p>首先全局有一个MouseManager，在代码里设置5中public图标样式（Textrue2D）</p>
<p>将MouseManager挂载到空物体–MouseManager–上，并将相应的图像进行赋值</p>
<p>在代码里面，获取鼠标位置碰撞物的<strong>Tag标签</strong>。能使用<strong>Tag的前提是有碰撞体组件的</strong>。</p>
</blockquote>
</li>
<li><p>如果是<strong>更改</strong>不同<strong>物体的渲染</strong>使得<strong>人物和敌人都可以在树后方显示（这里需要使用的是Layer层）</strong>，则同样要在URP的设置里把<strong>前后向渲染中的敌人加上</strong>。</p>
</li>
</ul>
</li>
</ol>
<h3 id="1、攻击敌人"><a href="#1、攻击敌人" class="headerlink" title="1、攻击敌人"></a>1、攻击敌人</h3><ul>
<li><p>首先在<strong>MouseManger</strong>里设置一个Event</p>
<div class="highlight-container" data-rel="C#"><figure class="iseeu highlight c#"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 设置Event</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">event</span> Action&lt;GameObject&gt; OnEnemyClicked;</span><br><span class="line"><span class="comment">//修改Mouse Control</span></span><br><span class="line"> <span class="function"><span class="keyword">void</span> <span class="title">MouseControl</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">// 鼠标左键为0,并且点击不为空</span></span><br><span class="line">        <span class="keyword">if</span>(Input.GetMouseButtonDown(<span class="number">0</span>) &amp;&amp; hitInfo.collider != <span class="literal">null</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(hitInfo.collider.gameObject.CompareTag(<span class="string">&quot;Ground&quot;</span>))&#123;</span><br><span class="line">                OnMouseClicked?.Invoke(hitInfo.point);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// 新增</span></span><br><span class="line">            <span class="keyword">if</span>(hitInfo.collider.gameObject.CompareTag(<span class="string">&quot;Enemy&quot;</span>))&#123;</span><br><span class="line">                OnEnemyClicked?.Invoke(hitInfo.collider.gameobject);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></div>


</li>
<li><p>然后再<strong>PlayController给Event增加一个函数</strong>，并<strong>获取函数返回的GameObject</strong></p>
</li>
<li><p>将<strong>人物不停的移动到敌人</strong>面前再执行攻击就需要<strong>不停的判断当前目标与Player的距离</strong>，不好使用While循环，使用<strong>协程</strong></p>
<div class="highlight-container" data-rel="C#"><figure class="iseeu highlight c#"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 攻击函数</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">EventAttack</span>(<span class="params">GameObject target</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(target != <span class="literal">null</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">// 赋值攻击的返回目标</span></span><br><span class="line">            attackTarget = target;</span><br><span class="line">            <span class="comment">// 使用协程</span></span><br><span class="line">             StartCoroutine(MoveToAttackTarget());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用协程</span></span><br><span class="line">    <span class="function">IEnumerator <span class="title">MoveToAttackTarget</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        agent.isStopped = <span class="literal">false</span>;</span><br><span class="line">        <span class="comment">// 首先将Player转向目标方向</span></span><br><span class="line">        transform.LookAt(attackTarget.transform);</span><br><span class="line"><span class="keyword">while</span>(Vector3.Distance(transform.position,attackTarget.transform.position) &gt; <span class="number">1</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            agent.destination = attackTarget.transform.position;</span><br><span class="line">            <span class="keyword">yield</span> <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        agent.isStopped = <span class="literal">true</span>;</span><br><span class="line">        <span class="comment">//Attack</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(lastAttackTime &lt; <span class="number">0</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            anim.SetTrigger(<span class="string">&quot;Attack&quot;</span>);</span><br><span class="line">            lastAttackTime = <span class="number">0.5f</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">MoveToTarget</span>(<span class="params">Vector3 target</span>)</span>&#123;</span><br><span class="line">    <span class="comment">// 打断协程</span></span><br><span class="line">        StopAllCoroutines();</span><br><span class="line">        agent.isStopped = <span class="literal">false</span>;</span><br><span class="line">        agent.destination = target;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></div>
</li>
<li><p>但是以上会存在一些问题，由于<strong>全局的MouseManger</strong>会在<strong>点击鼠标时触发OnMouseClicked和OnEnemyClicked的其中一个</strong>函数。</p>
<p>在OnEnemyClicked被触发的时候，Player会一直移动到敌方的位置，并且不可打断。</p>
<p>因为这时候已经开始调用协程了。在OnMouseClicked的MoveToTarget函数里面使用**StopAllCoroutines()**就可以打断协程。完成攻击时候的其他位置移动了。</p>
</li>
</ul>
<h3 id="2、-敌人追击"><a href="#2、-敌人追击" class="headerlink" title="2、 敌人追击"></a>2、 敌人追击</h3><div class="highlight-container" data-rel="C#"><figure class="iseeu highlight c#"><table><tr><td class="code"><pre><span class="line">[<span class="meta">Header(<span class="string">&quot;Basic Settings&quot;</span>)</span>]</span><br><span class="line"><span class="keyword">public</span> <span class="built_in">float</span> sightRadius;</span><br><span class="line"><span class="keyword">public</span> <span class="built_in">bool</span> isGuard;</span><br><span class="line"><span class="keyword">private</span> <span class="built_in">float</span> speed;</span><br><span class="line"><span class="keyword">public</span> GameObject attackTatget;</span><br><span class="line"></span><br><span class="line"><span class="comment">// bool 配合动画</span></span><br><span class="line"><span class="built_in">bool</span> isWalk;</span><br><span class="line"><span class="built_in">bool</span> isChase;</span><br><span class="line"><span class="built_in">bool</span> isFollow;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Awake</span>()</span></span><br><span class="line">&#123;</span><br><span class="line">    agent = GetComponent&lt;UnityEngine.AI.NavMeshAgent&gt;();</span><br><span class="line">    speed = agent.speed;</span><br><span class="line">    anim = GetComponent&lt;Animator&gt;();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Update</span>()</span></span><br><span class="line">&#123;</span><br><span class="line">    SwitchStates();</span><br><span class="line">    SwitchAnimation();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">SwitchAnimation</span>()</span></span><br><span class="line">&#123;</span><br><span class="line">    anim.SetBool(<span class="string">&quot;Walk&quot;</span>,isWalk);</span><br><span class="line">    anim.SetBool(<span class="string">&quot;Chase&quot;</span>,isChase);</span><br><span class="line">    anim.SetBool(<span class="string">&quot;Follow&quot;</span>,isFollow);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">SwitchStates</span>()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">// 如果发现player就切换CHASE</span></span><br><span class="line">    <span class="keyword">if</span>(FoundPlayer())</span><br><span class="line">    &#123;</span><br><span class="line">        enemystates = EnemyStates.CHASE;</span><br><span class="line">        <span class="comment">// Debug.Log(&quot;Find Player&quot;);</span></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">switch</span>(enemystates)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">case</span> EnemyStates.GUARD:</span><br><span class="line"></span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> EnemyStates.PATROL:</span><br><span class="line"></span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> EnemyStates.CHASE:</span><br><span class="line">            <span class="comment">// <span class="doctag">TODO:</span> 追Player</span></span><br><span class="line"></span><br><span class="line">            <span class="comment">// <span class="doctag">TODO:</span> 在攻击范围内则攻击</span></span><br><span class="line">            <span class="comment">// <span class="doctag">TODO:</span> 配合动画</span></span><br><span class="line">            isWalk = <span class="literal">false</span>;</span><br><span class="line">            isChase = <span class="literal">true</span>;</span><br><span class="line">            agent.speed = speed;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span>(!FoundPlayer())</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="comment">// <span class="doctag">TODO:</span> 拉回上一个状态</span></span><br><span class="line">                isFollow = <span class="literal">false</span>;</span><br><span class="line">                agent.detination = transform.position;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span>&#123;</span><br><span class="line">                isFollow = <span class="literal">true</span>;</span><br><span class="line">                agent.destination = attackTatget.transform.position;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> EnemyStates.DEAD:</span><br><span class="line"></span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 敌人巡逻查找敌人追击</span></span><br><span class="line"><span class="function"><span class="built_in">bool</span> <span class="title">FoundPlayer</span>()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">var</span> colliders = Physics.OverlapSphere(transform.position,sightRadius);</span><br><span class="line">    <span class="keyword">foreach</span> (<span class="keyword">var</span> target <span class="keyword">in</span> colliders)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(target.CompareTag(<span class="string">&quot;Player&quot;</span>))</span><br><span class="line">        &#123;</span><br><span class="line">            attackTatget = target.gameObject;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    attackTatget = <span class="literal">null</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<h3 id="3、敌人的巡逻移动"><a href="#3、敌人的巡逻移动" class="headerlink" title="3、敌人的巡逻移动"></a>3、敌人的巡逻移动</h3><p>为了更好的可视化变量范围，使用代码：</p>
<div class="highlight-container" data-rel="C#"><figure class="iseeu highlight c#"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">OnDrawGizmosSelected</span>()</span>&#123;</span><br><span class="line">    Gizmos.color = Color.blue;</span><br><span class="line">    Gizmos.DrawWireSphere(transform.position,sightRadius);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/images/Unity3D%5Cimage-20230908220958406.png"
                      alt="image-20230908220958406"
                ></p>
<p>每次都在Patrol的范围内随机选择一个点进行移动，但是可能会跑出去。每次都在新的位置的Patrol范围内移动。</p>
<div class="highlight-container" data-rel="C#"><figure class="iseeu highlight c#"><table><tr><td class="code"><pre><span class="line">[<span class="meta">Header(<span class="string">&quot;Patrol State&quot;</span>)</span>]</span><br><span class="line"><span class="keyword">public</span> <span class="built_in">float</span> patrolRange;</span><br><span class="line"><span class="keyword">private</span> Vector3 wayPoint;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Start</span>()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span>(isGuard)&#123;</span><br><span class="line">        enemystates = EnemyStates.GUARD;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span>&#123;</span><br><span class="line">        enemystates = EnemyStates.PATROL;</span><br><span class="line">        GetNewWayPoint();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">GetNewWayPoint</span>()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">float</span> randomX = Random.Range(-patrolRange,patrolRange);</span><br><span class="line">    <span class="built_in">float</span> randomZ = Random.Range(-patrolRange,patrolRange);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 修改前</span></span><br><span class="line">    <span class="comment">//Vector3 randomPoint = new Vector3(transform.position.x + randomX,</span></span><br><span class="line">                                      <span class="comment">//transform.position.y,transform.position.z + randomZ);</span></span><br><span class="line">    <span class="comment">//修改后:</span></span><br><span class="line">            Vector3 randomPoint = <span class="keyword">new</span> Vector3(guardPos.x + randomX,</span><br><span class="line">        transform.position.y,guardPos.z + randomZ);</span><br><span class="line">    <span class="comment">//FIXME : 可能出现问题</span></span><br><span class="line">    wayPoint = randomPoint;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">switch</span>(enemystates)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">case</span> EnemyStates.GUARD:</span><br><span class="line"></span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> EnemyStates.PATROL:</span><br><span class="line">        isChase = <span class="literal">false</span>;</span><br><span class="line">        agent.speed = speed * <span class="number">0.5f</span>;</span><br><span class="line">        <span class="keyword">if</span>(Vector3.Distance(wayPoint,transform.position) &lt;= agent.stoppingDistance)&#123;</span><br><span class="line"></span><br><span class="line">            isWalk = <span class="literal">false</span>;</span><br><span class="line">            GetNewWayPoint();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span>&#123;</span><br><span class="line">            isWalk = <span class="literal">true</span>;</span><br><span class="line">            agent.destination = wayPoint;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> EnemyStates.CHASE:</span><br><span class="line">        <span class="comment">// <span class="doctag">TODO:</span> 追Player</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// <span class="doctag">TODO:</span> 在攻击范围内则攻击</span></span><br><span class="line">        <span class="comment">// <span class="doctag">TODO:</span> 配合动画</span></span><br><span class="line">        isWalk = <span class="literal">false</span>;</span><br><span class="line">        isChase = <span class="literal">true</span>;</span><br><span class="line">        agent.speed = speed;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(!FoundPlayer())</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">// <span class="doctag">TODO:</span> 拉回上一个状态</span></span><br><span class="line">            isFollow = <span class="literal">false</span>;</span><br><span class="line">            agent.destination = transform.position;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span>&#123;</span><br><span class="line">            isFollow = <span class="literal">true</span>;</span><br><span class="line">            agent.destination = attackTatget.transform.position;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> EnemyStates.DEAD:</span><br><span class="line"></span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>

<p>但是以上会出现，如果随机选中到了不可能移动的点，就会卡在那里。</p>
<ul>
<li>所以需要使用NavMeshSample，只在导航地图中采样。</li>
</ul>
<div class="highlight-container" data-rel="C#"><figure class="iseeu highlight c#"><table><tr><td class="code"><pre><span class="line"> <span class="function"><span class="keyword">void</span> <span class="title">GetNewWayPoint</span>()</span></span><br><span class="line">    &#123;   </span><br><span class="line">        remainLookAtTime = lookAtTime;</span><br><span class="line">        <span class="built_in">float</span> randomX = Random.Range(-patrolRange,patrolRange);</span><br><span class="line">        <span class="built_in">float</span> randomZ = Random.Range(-patrolRange,patrolRange);</span><br><span class="line"></span><br><span class="line">        Vector3 randomPoint = <span class="keyword">new</span> Vector3(guardPos.x + randomX,transform.position.y,guardPos.z + randomZ);</span><br><span class="line">        <span class="comment">//FIXME : 可能出现问题</span></span><br><span class="line">        <span class="comment">// wayPoint = randomPoint;</span></span><br><span class="line">        UnityEngine.AI.NavMeshHit hit;</span><br><span class="line">        <span class="comment">// 只在导航地图中采样</span></span><br><span class="line">        wayPoint = UnityEngine.AI.NavMesh.SamplePosition(randomPoint,<span class="keyword">out</span> hit,patrolRange,<span class="number">1</span>) ? hit.position:transform.position;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">case</span> EnemyStates.PATROL:</span><br><span class="line">isChase = <span class="literal">false</span>;</span><br><span class="line">agent.speed = speed * <span class="number">0.5f</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 判断是否到了随机巡逻点</span></span><br><span class="line"><span class="keyword">if</span>(Vector3.Distance(wayPoint,transform.position) &lt;= agent.stoppingDistance)&#123;</span><br><span class="line">    isWalk = <span class="literal">false</span>;</span><br><span class="line">    <span class="keyword">if</span>(remainLookAtTime &gt;<span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        remainLookAtTime -= Time.deltaTime;</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        GetNewWayPoint();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line">    isWalk = <span class="literal">true</span>;</span><br><span class="line">    agent.destination = wayPoint;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">break</span>;</span><br></pre></td></tr></table></figure></div>

<p>现在是脱战后在原地不动，需要改成脱战后巡逻：</p>
<div class="highlight-container" data-rel="C#"><figure class="iseeu highlight c#"><table><tr><td class="code"><pre><span class="line"><span class="keyword">case</span> EnemyStates.CHASE:</span><br><span class="line"><span class="comment">// <span class="doctag">TODO:</span> 追Player</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// <span class="doctag">TODO:</span> 在攻击范围内则攻击</span></span><br><span class="line"><span class="comment">// <span class="doctag">TODO:</span> 配合动画</span></span><br><span class="line">isWalk = <span class="literal">false</span>;</span><br><span class="line">isChase = <span class="literal">true</span>;</span><br><span class="line">agent.speed = speed;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(!FoundPlayer())</span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">// <span class="doctag">TODO:</span> 拉回上一个状态</span></span><br><span class="line">    isFollow = <span class="literal">false</span>;</span><br><span class="line">    <span class="keyword">if</span>(remainLookAtTime &gt; <span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        agent.destination = transform.position;</span><br><span class="line">        remainLookAtTime -= Time.deltaTime;</span><br><span class="line">    &#125;<span class="keyword">else</span> <span class="keyword">if</span>(isGuard)&#123;</span><br><span class="line">        enemystates = EnemyStates.GUARD;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span>&#123;</span><br><span class="line">        enemystates = EnemyStates.PATROL;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line">    isFollow = <span class="literal">true</span>;</span><br><span class="line">    agent.destination = attackTatget.transform.position;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">break</span>;</span><br></pre></td></tr></table></figure></div>



<h2 id="十一、数据分离（状态存储）"><a href="#十一、数据分离（状态存储）" class="headerlink" title="十一、数据分离（状态存储）"></a>十一、数据分离（状态存储）</h2><h3 id="1、人物基本数值"><a href="#1、人物基本数值" class="headerlink" title="1、人物基本数值"></a>1、人物基本数值</h3><ol>
<li><p>创建状态文件夹Characters stats</p>
<ul>
<li>MonoBehavior:</li>
<li>ScriptableObject:</li>
</ul>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/images/Unity3D%5Cimage-20230909134034306.png"
                      alt="image-20230909134034306"
                ></p>
<p><strong>CharacterData_SO设置好代码后可以在Create菜单中显示</strong>，将代码中设置基本的HP属性，并在Create中创建Player Data。</p>
<div class="highlight-container" data-rel="C#"><figure class="iseeu highlight c#"><table><tr><td class="code"><pre><span class="line"><span class="keyword">using</span> System.Collections;</span><br><span class="line"><span class="keyword">using</span> System.Collections.Generic;</span><br><span class="line"><span class="keyword">using</span> UnityEngine;</span><br><span class="line"></span><br><span class="line">[<span class="meta">CreateAssetMenu(fileName = <span class="string">&quot;New Data&quot;</span>,menuName = <span class="string">&quot;Character Stats/Data&quot;</span>)</span>]</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">CharacterData_SO</span> : <span class="title">ScriptableObject</span></span><br><span class="line">&#123;</span><br><span class="line">    [<span class="meta">Header(<span class="string">&quot;Stats Info&quot;</span>)</span>]</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">int</span> maxHealth;</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">int</span> currentHealth;</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">int</span> baseDefence;</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">int</span> currentDefence;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>


</li>
<li><p>在MonoBehavior下<strong>创建CharacterStats脚本</strong>，<strong>用于挂载CharacterData_SO（这个类没有继承MonoBehavior没法进行挂载）</strong></p>
<div class="highlight-container" data-rel="C#"><figure class="iseeu highlight c#"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 大括号里有一个get表示这个变量可以get不能set。如果既有get又有set表示变量两个都可以</span></span><br><span class="line"><span class="keyword">public</span> <span class="built_in">int</span> MaxHealth&#123;</span><br><span class="line">    <span class="keyword">get</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(characterData != <span class="literal">null</span>)</span><br><span class="line">            <span class="keyword">return</span> characterData.maxHealth;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">set</span>&#123;</span><br><span class="line">        characterData.maxHealth = <span class="keyword">value</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>


</li>
<li><p>最后<strong>将CharacterStats脚本挂载到Player和Slime</strong>上，再<strong>赋值相应的数据文件</strong>。可以实现数据设置和角色分离</p>
</li>
</ol>
<h3 id="2、攻击数值"><a href="#2、攻击数值" class="headerlink" title="2、攻击数值"></a>2、攻击数值</h3><div class="highlight-container" data-rel="C#"><figure class="iseeu highlight c#"><table><tr><td class="code"><pre><span class="line"> <span class="keyword">case</span> EnemyStates.CHASE:</span><br><span class="line"><span class="comment">// <span class="doctag">TODO:</span> 配合动画</span></span><br><span class="line">isWalk = <span class="literal">false</span>;</span><br><span class="line">isChase = <span class="literal">true</span>;</span><br><span class="line">agent.speed = speed;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(!FoundPlayer())</span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">// <span class="doctag">TODO:</span> 拉回上一个状态</span></span><br><span class="line">    isFollow = <span class="literal">false</span>;</span><br><span class="line">    <span class="keyword">if</span>(remainLookAtTime &gt; <span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        agent.destination = transform.position;</span><br><span class="line">        remainLookAtTime -= Time.deltaTime;</span><br><span class="line">    &#125;<span class="keyword">else</span> <span class="keyword">if</span>(isGuard)&#123;</span><br><span class="line">        enemystates = EnemyStates.GUARD;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span>&#123;</span><br><span class="line">        enemystates = EnemyStates.PATROL;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line">    isFollow = <span class="literal">true</span>;</span><br><span class="line">    agent.isStopped = <span class="literal">false</span>;</span><br><span class="line">    agent.destination = attackTatget.transform.position;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// <span class="doctag">TODO:</span> 在攻击范围内则攻击</span></span><br><span class="line"><span class="keyword">if</span>(TargetInAttackRange() || TargetInSkillRange())</span><br><span class="line">&#123;</span><br><span class="line">    isFollow = <span class="literal">false</span>;</span><br><span class="line">    agent.isStopped = <span class="literal">true</span>;</span><br><span class="line">    <span class="keyword">if</span>(lastAttackTime &lt; <span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        lastAttackTime = characterStats.attackData.coolDown;</span><br><span class="line">        <span class="comment">// 暴击判断</span></span><br><span class="line">        characterStats.isCritical = Random.<span class="keyword">value</span>  &lt; characterStats.attackData.criticalChance;</span><br><span class="line">        <span class="comment">// 执行攻击</span></span><br><span class="line">        Attack();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Attack</span>()</span></span><br><span class="line">&#123;</span><br><span class="line">    transform.LookAt(attackTatget.transform);</span><br><span class="line">    <span class="keyword">if</span>(TargetInAttackRange())</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">// 近身攻击动画</span></span><br><span class="line">        anim.SetTrigger(<span class="string">&quot;Attack&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(TargetInSkillRange())</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">// 技能攻击动画</span></span><br><span class="line">        anim.SetTrigger(<span class="string">&quot;Skill&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="built_in">bool</span> <span class="title">TargetInAttackRange</span>()</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(attackTatget != <span class="literal">null</span>)</span><br><span class="line">        <span class="keyword">return</span> Vector3.Distance(attackTatget.transform.position,transform.position) &lt;= characterStats.attackData.attackRange;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="built_in">bool</span> <span class="title">TargetInSkillRange</span>()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span>(attackTatget != <span class="literal">null</span>)</span><br><span class="line">        <span class="keyword">return</span> Vector3.Distance(attackTatget.transform.position,transform.position) &lt;= characterStats.attackData.skillRange;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>



<h2 id="十二、实现伤害函数"><a href="#十二、实现伤害函数" class="headerlink" title="十二、实现伤害函数"></a>十二、实现伤害函数</h2><ol>
<li><p>在CharcterStats中实现TakeDamage函数()</p>
<div class="highlight-container" data-rel="C#"><figure class="iseeu highlight c#"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">TakeDamage</span>(<span class="params">CharacterStats attacker,CharacterStats defener</span>)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">int</span> damage = Mathf.Max(attacker.CurrentDamage() - defener.currentDefence,<span class="number">0</span>);</span><br><span class="line">currentHealth = Mathf.Max(currentHealth - damage,<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// <span class="doctag">TODO:</span> update UI</span></span><br><span class="line"><span class="comment">// <span class="doctag">TODO:</span> 经验update</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="built_in">int</span> <span class="title">CurrentDamage</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">float</span> coreDamage = UnityEngine.Random.Range(attackData.minDamage,attackData.maxDamage);</span><br><span class="line">        <span class="keyword">if</span>(isCritical) &#123;</span><br><span class="line">            coreDamage *= attackData.criticalMultiplier;</span><br><span class="line">            Debug.Log(<span class="string">&quot;暴击！&quot;</span> + coreDamage);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> (<span class="built_in">int</span>) coreDamage;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></div>


</li>
<li><p>在Player和Enemy的Controller中实现伤害函数Hit</p>
<ul>
<li>PlayerController</li>
</ul>
<div class="highlight-container" data-rel="C#"><figure class="iseeu highlight c#"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Animation Event</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Hit</span>()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">var</span> targetStats = attackTarget.GetComponent&lt;CharacterStats&gt;();</span><br><span class="line">    targetStats.TakeDamage(characterStats,targetStats);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<ul>
<li>EnemyController:</li>
</ul>
<div class="highlight-container" data-rel="C#"><figure class="iseeu highlight c#"><table><tr><td class="code"><pre><span class="line">      </span><br></pre></td></tr></table></figure></div>


</li>
<li><p>找到伤害动画位置，打开WIndow -&gt; Animation -&gt;Animation 的Attack动画中的一帧，在此增加一个关键帧，并选择HIt函数</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/images/Unity3D%5Cimage-20230909194442214.png"
                      alt="image-20230909194442214"
                ></p>
<p><strong>如果Enemy的动画都是只读的</strong>，需要在Project文件夹中，将相应的动画进行ctrl+d复制，并放在自己的文件夹下，这时候就能修改了。</p>
</li>
</ol>
<h2 id="十三、敌人的守卫和死亡模式"><a href="#十三、敌人的守卫和死亡模式" class="headerlink" title="十三、敌人的守卫和死亡模式"></a>十三、敌人的守卫和死亡模式</h2><p>请注意每次试玩之前要把所有Data里面的数据还原</p>
<h3 id="1、回到守卫模式"><a href="#1、回到守卫模式" class="headerlink" title="1、回到守卫模式"></a>1、回到守卫模式</h3><ul>
<li>计算<strong>当前位置和守卫位置的距离</strong>，然后将导航终点设置为守卫位置，一旦小于停止距离就暂停</li>
</ul>
<p>（计算距离而言<strong>SqrMagnitude和Distance的性能开销</strong>在小项目相差不大，实际上是前者开销更小）</p>
<div class="highlight-container" data-rel="C#"><figure class="iseeu highlight c#"><table><tr><td class="code"><pre><span class="line"><span class="keyword">case</span> EnemyStates.GUARD:</span><br><span class="line">isChase = <span class="literal">false</span>;</span><br><span class="line"><span class="keyword">if</span>(transform.position != guardPos)</span><br><span class="line">&#123;</span><br><span class="line">isWalk = <span class="literal">true</span>;</span><br><span class="line">agent.isStopped  = <span class="literal">false</span>;</span><br><span class="line">agent.destination = guardPos;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(Vector3.SqrMagnitude(guardPos - transform.position) &lt;= agent.stoppingDistance)&#123;</span><br><span class="line">isWalk = <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">break</span>;</span><br></pre></td></tr></table></figure></div>

<ul>
<li><strong>但是这里守卫敌人虽然能够回去，角度却是背对我们的，需要将角度转回来。</strong></li>
</ul>
<p>Unity当中rotation的参数数值使用的是<strong>四元数Quaternion</strong></p>
<div class="highlight-container" data-rel="C#"><figure class="iseeu highlight c#"><table><tr><td class="code"><pre><span class="line"><span class="keyword">case</span> EnemyStates.GUARD:</span><br><span class="line">isChase = <span class="literal">false</span>;</span><br><span class="line"><span class="keyword">if</span>(transform.position != guardPos)</span><br><span class="line">&#123;</span><br><span class="line">    isWalk = <span class="literal">true</span>;</span><br><span class="line">    agent.isStopped  = <span class="literal">false</span>;</span><br><span class="line">    agent.destination = guardPos;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(Vector3.SqrMagnitude(guardPos - transform.position) &lt;= agent.stoppingDistance)&#123;</span><br><span class="line">        isWalk = <span class="literal">false</span>;</span><br><span class="line">        <span class="comment">// 使用Lerp让旋转慢慢转回去，0.01f是旋转的程度，范围为[0,1]</span></span><br><span class="line">        transform.rotation = Quaternion.Lerp(transform.rotation,guardRotation,<span class="number">0.01f</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">break</span>;</span><br></pre></td></tr></table></figure></div>

<h3 id="2、设置死亡动画"><a href="#2、设置死亡动画" class="headerlink" title="2、设置死亡动画"></a>2、设置死亡动画</h3><p>在Slime的Animator中<strong>增加一个Death Layer层，并将层的权重设置为1.（注意，一定要将层的权重设置为1）</strong>。记得将Can Transition Self取消勾选，不然会一直重复播放死亡。</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/images/Unity3D%5Cimage-20230910150134903.png"
                      alt="image-20230910150134903"
                ></p>
<div class="highlight-container" data-rel="C#"><figure class="iseeu highlight c#"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Dead 状态下的代码</span></span><br><span class="line"><span class="keyword">case</span> EnemyStates.DEAD:</span><br><span class="line">	<span class="comment">// 需要确保Box Collider或者Capsule Collier关闭，这样Player就无法再Enemy死亡后进行攻击判断（因为攻击判断的时候是判断了Tag是Enemy并且有碰撞体Collider）</span></span><br><span class="line">	<span class="comment">// 代码执行顺序还是很重要的，如果执行出来的效果和想象的不一样，可能是顺序问题。</span></span><br><span class="line">    coll.enabled = <span class="literal">false</span>;</span><br><span class="line">    agent.enabled = <span class="literal">false</span>;</span><br><span class="line">    Destroy(gameObject,<span class="number">2.0f</span>);</span><br><span class="line"><span class="keyword">break</span>;</span><br></pre></td></tr></table></figure></div>

<p>存一下MouseManger代码的备份，因为下面泛式单例模式会修改：</p>
<div class="highlight-container" data-rel="C#"><figure class="iseeu highlight c#"><table><tr><td class="code"><pre><span class="line"><span class="keyword">using</span> System.Collections;</span><br><span class="line"><span class="keyword">using</span> System.Collections.Generic;</span><br><span class="line"><span class="keyword">using</span> UnityEngine;</span><br><span class="line"><span class="keyword">using</span> UnityEngine.Events;</span><br><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"></span><br><span class="line"><span class="comment">// [System.Serializable]</span></span><br><span class="line"><span class="comment">// public class EventVector3 : UnityEvent&lt;Vector3&gt;&#123;</span></span><br><span class="line"><span class="comment">// &#125;</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">MouseManager</span> : <span class="title">MonoBehaviour</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> MouseManager Instance;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">event</span> Action&lt;Vector3&gt; OnMouseClicked;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">event</span> Action&lt;GameObject&gt; OnEnemyClicked;</span><br><span class="line">    <span class="keyword">public</span> Texture2D point,doorway,attack,target,arrow;</span><br><span class="line">    RaycastHit hitInfo;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">Awake</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(Instance != <span class="literal">null</span>)</span><br><span class="line">            Destroy(gameObject);</span><br><span class="line">        Instance = <span class="keyword">this</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Update is called once per frame</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">Update</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        SetCursorTexture();</span><br><span class="line">        MouseControl();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">SetCursorTexture</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        Ray ray = Camera.main.ScreenPointToRay(Input.mousePosition);</span><br><span class="line">        <span class="keyword">if</span>(Physics.Raycast(ray, <span class="keyword">out</span> hitInfo))&#123;</span><br><span class="line">            <span class="comment">// 切换鼠标贴图</span></span><br><span class="line">            <span class="keyword">switch</span>(hitInfo.collider.gameObject.tag)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">case</span> <span class="string">&quot;Ground&quot;</span>:</span><br><span class="line">                Cursor.SetCursor(target,<span class="keyword">new</span> Vector2(<span class="number">16</span>,<span class="number">16</span>),CursorMode.Auto);<span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> <span class="string">&quot;Enemy&quot;</span>:</span><br><span class="line">                Cursor.SetCursor(attack,<span class="keyword">new</span> Vector2(<span class="number">16</span>,<span class="number">16</span>),CursorMode.Auto);<span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">MouseControl</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">// 鼠标左键为0,并且点击不为空</span></span><br><span class="line">        <span class="keyword">if</span>(Input.GetMouseButtonDown(<span class="number">0</span>) &amp;&amp; hitInfo.collider != <span class="literal">null</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(hitInfo.collider.gameObject.CompareTag(<span class="string">&quot;Ground&quot;</span>))&#123;</span><br><span class="line">                OnMouseClicked?.Invoke(hitInfo.point);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(hitInfo.collider.gameObject.CompareTag(<span class="string">&quot;Enemy&quot;</span>))&#123;</span><br><span class="line">                OnEnemyClicked?.Invoke(hitInfo.collider.gameObject);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>



<h2 id="十四、泛型单例模式：GameManager控制游戏进度（Player死亡表示游戏结束）"><a href="#十四、泛型单例模式：GameManager控制游戏进度（Player死亡表示游戏结束）" class="headerlink" title="十四、泛型单例模式：GameManager控制游戏进度（Player死亡表示游戏结束）"></a>十四、泛型单例模式：GameManager控制游戏进度（Player死亡表示游戏结束）</h2><p>GameManager用于控制游戏进度，并且将设置成一个单例模式，但是每个都设置成单例模式会比较麻烦，所以需要设计一个泛型单例模式。然后将所有的Manager都继承于这个泛型单例。</p>
<ul>
<li>泛型类（基类）Singelton</li>
</ul>
<div class="highlight-container" data-rel="C#"><figure class="iseeu highlight c#"><table><tr><td class="code"><pre><span class="line"><span class="keyword">using</span> System.Collections;</span><br><span class="line"><span class="keyword">using</span> System.Collections.Generic;</span><br><span class="line"><span class="keyword">using</span> UnityEngine;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 第一个Singleton&lt;T&gt;表示他是一个泛型</span></span><br><span class="line"><span class="comment">// where T:Singleton&lt;T&gt;是对泛型T的约束，表示T必须是Singleton类的子类</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Singleton</span>&lt;<span class="title">T</span>&gt;: <span class="title">MonoBehaviour</span> <span class="keyword">where</span> <span class="title">T</span>:<span class="title">Singleton</span>&lt;<span class="title">T</span>&gt;</span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">// 单例模式的基础写法</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> T instance;</span><br><span class="line">    <span class="comment">// 由于instance标量是private，需要用Instance暴露给外界</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> T Instance&#123;</span><br><span class="line">        <span class="keyword">get</span>&#123;</span><br><span class="line">            <span class="keyword">return</span> instance;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 创建一个虚函数让子类的单例类继承后实现</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">Awake</span>()</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(instance != <span class="literal">null</span>)</span><br><span class="line">         &#123;   </span><br><span class="line">            Destroy(gameObject);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            instance = (T)<span class="keyword">this</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 创建一个布尔量判断instance是否为空</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="built_in">bool</span> IsInitalized&#123;</span><br><span class="line">        <span class="keyword">get</span>&#123;<span class="keyword">return</span> instance != <span class="literal">null</span>&#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">OnDestroy</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(instance == <span class="keyword">this</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            instance = <span class="literal">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>image-20230907212142278.png)</p>
</li>
<li><p>在Project Settings：</p>
<ul>
<li><p>Graphics：</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="E:\project\Hexo\source\images\Unity3D\image-20230907212230239.png"
                      alt="image-20230907212230239"
                ></p>
</li>
<li><p>Quality</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="E:\project\Hexo\source\images\Unity3D\image-20230907212245575.png"
                      alt="image-20230907212245575"
                ></p>
</li>
</ul>
</li>
</ol>
<p>需要注意，下载的Package Manager里面的素材都需要支持URP版本，在素材中选择相应的URP版本。</p>
<h3 id="2）升级当前场景的URP（正确显示模型纹理）-1"><a href="#2）升级当前场景的URP（正确显示模型纹理）-1" class="headerlink" title="2）升级当前场景的URP（正确显示模型纹理）"></a>2）升级当前场景的URP（正确显示模型纹理）</h3><p>在Windows -&gt; Rendering -&gt; Render Pipeline Converter中选择Bulit-in的前两项，Initialize Converters后Convert Assets</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="E:\project\Hexo\source\images\Unity3D\image-20230907212640407.png"
                      alt="image-20230907212640407"
                ></p>
<h2 id="二、创建植被或地面-PolyBrush-Probuilder-1"><a href="#二、创建植被或地面-PolyBrush-Probuilder-1" class="headerlink" title="二、创建植被或地面(PolyBrush &#x2F; Probuilder)"></a>二、创建植被或地面(PolyBrush &#x2F; Probuilder)</h2><h3 id="1、PolyBrush-1"><a href="#1、PolyBrush-1" class="headerlink" title="1、PolyBrush"></a>1、PolyBrush</h3><p>​	在Package Manager里面下载组件之后可以刷植被</p>
<h3 id="2、ProBuilder-1"><a href="#2、ProBuilder-1" class="headerlink" title="2、ProBuilder"></a>2、ProBuilder</h3><p>​	创建地面</p>
<h3 id="3、ProGrids（不常用）-1"><a href="#3、ProGrids（不常用）-1" class="headerlink" title="3、ProGrids（不常用）"></a>3、ProGrids（不常用）</h3><ul>
<li><p>首先在Edit -&gt; project settings中启用</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="E:\project\Hexo\source\images\Unity3D\image-20230907213652201.png"
                      alt="image-20230907213652201"
                ></p>
</li>
<li><p>在Package Manager中下载</p>
</li>
</ul>
<h2 id="三、烘焙地图（AI导航系统）-1"><a href="#三、烘焙地图（AI导航系统）-1" class="headerlink" title="三、烘焙地图（AI导航系统）"></a>三、烘焙地图（AI导航系统）</h2><p>先在Window -&gt; AI -&gt; Navigatoin中打开导航</p>
<h3 id="1）静态地图障碍物-1"><a href="#1）静态地图障碍物-1" class="headerlink" title="1）静态地图障碍物"></a>1）静态地图障碍物</h3><ol>
<li><p>将地面在Inspector界面中的static设置为Navigation Static</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="E:\project\Hexo\source\images\Unity3D\image-20230907223726816.png"
                      alt="image-20230907223726816"
                ></p>
</li>
<li><p>设置Tree的static</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="E:\project\Hexo\source\images\Unity3D\image-20230907223739749.png"
                      alt="image-20230907223739749"
                ></p>
</li>
<li><p>给<strong>人物</strong>增加一个Nav Mesh Agent的组件</p>
<p>设置好大小之后：</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="E:\project\Hexo\source\images\Unity3D\image-20230907223909569.png"
                      alt="image-20230907223909569"
                ></p>
<p>需要在Navigation的Bake中调节相应的参数</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="E:\project\Hexo\source\images\Unity3D\image-20230907223954881.png"
                      alt="image-20230907223954881"
                ></p>
</li>
</ol>
<h3 id="2）动态地图障碍物-1"><a href="#2）动态地图障碍物-1" class="headerlink" title="2）动态地图障碍物"></a>2）动态地图障碍物</h3><p>对于某个移动的东西</p>
<p>​	对<strong>任意一个物体</strong>增加一个<strong>Nav Mesh Obstacle</strong>的组件，</p>
<h2 id="四、人物按照导航移动（UnityEngine-Events）-1"><a href="#四、人物按照导航移动（UnityEngine-Events）-1" class="headerlink" title="四、人物按照导航移动（UnityEngine.Events）"></a>四、人物按照导航移动（UnityEngine.Events）</h2><h3 id="1、非单例模式事件-1"><a href="#1、非单例模式事件-1" class="headerlink" title="1、非单例模式事件"></a>1、非单例模式事件</h3><p>主要使用了UnityEvent<Vector3>的类</p>
<ol>
<li>首先需要引用UnityEngine.Events事件</li>
<li>创建一个UnityEvent<Vector3>的类，并在继承MonoBehaviour的子类中创建变量。</li>
<li>注意：这里需要使用[System.Serializable]才能在Unity中看到暴露出来的变量。</li>
</ol>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="E:\project\Hexo\source\images\Unity3D\image-20230908101905259.png"
                      alt="image-20230908101905259"
                ></p>
<div class="highlight-container" data-rel="C#"><figure class="iseeu highlight c#"><table><tr><td class="code"><pre><span class="line"><span class="keyword">using</span> System.Collections;</span><br><span class="line"><span class="keyword">using</span> System.Collections.Generic;</span><br><span class="line"><span class="keyword">using</span> UnityEngine;</span><br><span class="line"><span class="keyword">using</span> UnityEngine.Events;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Important to show</span></span><br><span class="line"><span class="comment">// ****************************************</span></span><br><span class="line">[<span class="meta">System.Serializable</span>]</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">EventVector3</span> : <span class="title">UnityEvent</span>&lt;<span class="title">Vector3</span>&gt;&#123;&#125;</span><br><span class="line"><span class="comment">// ****************************************</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">MouseManager</span> : <span class="title">MonoBehaviour</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> EventVector3 OnMouseClicked;</span><br><span class="line">    RaycastHit hitInfo;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// Update is called once per frame</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">Update</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        SetCursorTexture();</span><br><span class="line">        MouseControl();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">SetCursorTexture</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        Ray ray = Camera.main.ScreenPointToRay(Input.mousePosition);</span><br><span class="line">        <span class="keyword">if</span>(Physics.Raycast(ray, <span class="keyword">out</span> hitInfo))&#123;</span><br><span class="line">            <span class="comment">// 切换鼠标贴图</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Mouse Control</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">MouseControl</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">// 鼠标左键为0,并且点击不为空</span></span><br><span class="line">        <span class="keyword">if</span>(Input.GetMouseButtonDown(<span class="number">0</span>) &amp;&amp; hitInfo.collider != <span class="literal">null</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(hitInfo.collider.gameObject.CompareTag(<span class="string">&quot;Ground&quot;</span>))&#123;</span><br><span class="line">                OnMouseClicked?.Invoke(hitInfo.point);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>主要代码为：</p>
<div class="highlight-container" data-rel="C#"><figure class="iseeu highlight c#"><table><tr><td class="code"><pre><span class="line"><span class="keyword">using</span> UnityEngine.Events;</span><br><span class="line">[<span class="meta">System.Serializable</span>]</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">EventVector3</span> : <span class="title">UnityEvent</span>&lt;<span class="title">Vector3</span>&gt;&#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">MouseManager</span> : <span class="title">MonoBehaviour</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> MouseManager Instance;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>人物导航的基本属性：</p>
<ul>
<li>Angular Speed：转角速度，人物在旋转时候的旋转速度</li>
<li>Stoppint Distance：是距离物体多远的距离停下，一般人物手中持有不同的武器就可以设置不同的停止距离</li>
<li>Auto Braking：给人物设置一下缓慢停下来的过程。</li>
</ul>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="E:\project\Hexo\source\images\Unity3D\image-20230908104104983.png"
                      alt="image-20230908104104983"
                ></p>
<ul>
<li>使用NavMeshAgent的类，需要在前面<strong>using UnityEngine.AI</strong></li>
</ul>
<h2 id="五、将函数注册到Event的中不使用拖拽的方式-1"><a href="#五、将函数注册到Event的中不使用拖拽的方式-1" class="headerlink" title="五、将函数注册到Event的中不使用拖拽的方式"></a>五、将函数注册到Event的中不使用拖拽的方式</h2><p>需要将MouseManger修改成一个单例模式</p>
<h3 id="单例模式-1"><a href="#单例模式-1" class="headerlink" title="单例模式"></a>单例模式</h3><ul>
<li>MouseManger：设置为单例模式的类</li>
</ul>
<div class="highlight-container" data-rel="C#"><figure class="iseeu highlight c#"><table><tr><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">MouseManager</span> : <span class="title">MonoBehaviour</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">// set static parameters</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> MouseManager Instance;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">event</span> Action&lt;Vector3&gt; OnMouseClicked;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">Awake</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(Instance != <span class="literal">null</span>)</span><br><span class="line">            Destory(gameObject);</span><br><span class="line">        Instance = <span class="keyword">this</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<ul>
<li><p>PlayController：必须要设置一个和OnMouseClicked的输入类型一样的函数</p>
<div class="highlight-container" data-rel="C#"><figure class="iseeu highlight c#"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 增加订阅的方式 ：+=</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Start</span>()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">// 将函数注册进去</span></span><br><span class="line">    MouseManager.Instance.OnMouseClicked += MoveToTarget;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 定义函数，输入类型Vector3要与Action&lt;Vector3&gt;保持一致</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">MoveToTarget</span>(<span class="params">Vector3 target</span>)</span>&#123;</span><br><span class="line">        agent.destination = target;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div></li>
</ul>
<p>游戏运行时，<strong>会触发所有在MouseManger里面注册的函数</strong>（在每个Controller中进行响应的函数注册）</p>
<h2 id="六、CinaMarchine-1"><a href="#六、CinaMarchine-1" class="headerlink" title="六、CinaMarchine"></a>六、CinaMarchine</h2><ol>
<li><p>在Package Manager中下载CinaMarchine之后</p>
</li>
<li><p>固定视角：在GameObject的CinaMarchine中创建一个Virtual Camera</p>
<ul>
<li>Follow：选择要跟随的角色</li>
<li>Body：选择Framing Transposer</li>
<li>Aim：选择Nothing</li>
</ul>
</li>
<li><p>转动视角（非固定视角）FreeLook</p>
</li>
</ol>
<h2 id="七、增加雾效-后处理-1"><a href="#七、增加雾效-后处理-1" class="headerlink" title="七、增加雾效&#x2F;后处理"></a>七、增加雾效&#x2F;后处理</h2><ul>
<li><p>雾效</p>
<p>Window -&gt; Rendering -&gt; Lighting -&gt; Enviroments -&gt; Other Settings -&gt; Fog</p>
</li>
<li><p>后处理</p>
<p>场景升级为URP自带后处理（Post-Processing)。直接在Hierachy中右键创建Volume。并在Profile中创建new。并在Main Camera的Camera中启用post-processing</p>
</li>
</ul>
<h2 id="八、动画-1"><a href="#八、动画-1" class="headerlink" title="八、动画"></a>八、动画</h2><ol>
<li>添加Animator组件</li>
<li>创建一个Animation Controller并赋值给角色Animator组件</li>
<li>打开创建的PlayController，创建一个Blend Tree（动画混合树）打开Blend Tree，在右侧添加Add Motion Fields，并在Parameter选择Speed（左侧创建Speed变量）。</li>
<li>在角色代码里获取Animator组件的变量，并使用SetFloat将导航的速度传给动画的Speed，完成动画效果。</li>
</ol>
<h2 id="九、Shader-Graph-1"><a href="#九、Shader-Graph-1" class="headerlink" title="九、Shader Graph"></a>九、Shader Graph</h2><p>​	在<strong>人物</strong>在<strong>被遮挡的物体</strong>后面实现<strong>遮挡剔除</strong>的效果。<strong>人物在树之后</strong>的时候<strong>显示人物轮廓</strong></p>
<ol>
<li><p>创建Shader Graph：在Project中Create -&gt; Shader Graph -&gt;URP -&gt; Unlit Shader Graph</p>
<p>这里就是连连看的Shader渲染</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="E:\project\Hexo\source\images\Unity3D\image-20230908135850939.png"
                      alt="image-20230908135850939"
                ></p>
</li>
<li><p>然后再URP的Setting中进行设置，首先打开Universal Render Pipeline Asset_Renderer</p>
<ul>
<li><p>在Add Renderer Feature中选择Render Object(Exprimental)</p>
</li>
<li><p>添加两个Render Feature：一个前景，一个背景</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="E:\project\Hexo\source\images\Unity3D\image-20230908140905243.png"
                      alt="image-20230908140905243"
                ></p>
</li>
</ul>
<p>一个地图走到树中间时，点击树，并不会走到树遮挡到的路的位置。有两种方法：</p>
<p>1）直接让树忽略射线，先选中所有的树，在Layer中选择2: Ignore Raycast</p>
<p>2）选中所有的树，关闭掉所有的Mesh Collider</p>
</li>
</ol>
<h2 id="十、设置敌人-1"><a href="#十、设置敌人-1" class="headerlink" title="十、设置敌人"></a>十、设置敌人</h2><p>尝试把同一个<strong>脚本自动挂载</strong>到<strong>敌人</strong>身上</p>
<ol>
<li><p>创建一个Enemy Controller的Scripts</p>
</li>
<li><p>增加代码**[RequireComponent(typeof(NavMeshAgent))]<strong>，</strong>挂载该代码<strong>就会</strong>自动<strong>将</strong>NavMeshAgent组件挂载**上去。</p>
<ul>
<li><p>这里需要注意的是，如果是要更改<strong>鼠标所指位置的图标</strong>，<strong>需要</strong>不同物体的<strong>标签标记</strong></p>
<blockquote>
<p>首先全局有一个MouseManager，在代码里设置5中public图标样式（Textrue2D）</p>
<p>将MouseManager挂载到空物体–MouseManager–上，并将相应的图像进行赋值</p>
<p>在代码里面，获取鼠标位置碰撞物的<strong>Tag标签</strong>。能使用<strong>Tag的前提是有碰撞体组件的</strong>。</p>
</blockquote>
</li>
<li><p>如果是<strong>更改</strong>不同<strong>物体的渲染</strong>使得<strong>人物和敌人都可以在树后方显示（这里需要使用的是Layer层）</strong>，则同样要在URP的设置里把<strong>前后向渲染中的敌人加上</strong>。</p>
</li>
</ul>
</li>
</ol>
<h3 id="1、攻击敌人-1"><a href="#1、攻击敌人-1" class="headerlink" title="1、攻击敌人"></a>1、攻击敌人</h3><ul>
<li><p>首先在<strong>MouseManger</strong>里设置一个Event</p>
<div class="highlight-container" data-rel="C#"><figure class="iseeu highlight c#"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 设置Event</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">event</span> Action&lt;GameObject&gt; OnEnemyClicked;</span><br><span class="line"><span class="comment">//修改Mouse Control</span></span><br><span class="line"> <span class="function"><span class="keyword">void</span> <span class="title">MouseControl</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">// 鼠标左键为0,并且点击不为空</span></span><br><span class="line">        <span class="keyword">if</span>(Input.GetMouseButtonDown(<span class="number">0</span>) &amp;&amp; hitInfo.collider != <span class="literal">null</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(hitInfo.collider.gameObject.CompareTag(<span class="string">&quot;Ground&quot;</span>))&#123;</span><br><span class="line">                OnMouseClicked?.Invoke(hitInfo.point);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// 新增</span></span><br><span class="line">            <span class="keyword">if</span>(hitInfo.collider.gameObject.CompareTag(<span class="string">&quot;Enemy&quot;</span>))&#123;</span><br><span class="line">                OnEnemyClicked?.Invoke(hitInfo.collider.gameobject);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></div>


</li>
<li><p>然后再<strong>PlayController给Event增加一个函数</strong>，并<strong>获取函数返回的GameObject</strong></p>
</li>
<li><p>将<strong>人物不停的移动到敌人</strong>面前再执行攻击就需要<strong>不停的判断当前目标与Player的距离</strong>，不好使用While循环，使用<strong>协程</strong></p>
<div class="highlight-container" data-rel="C#"><figure class="iseeu highlight c#"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 攻击函数</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">EventAttack</span>(<span class="params">GameObject target</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(target != <span class="literal">null</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">// 赋值攻击的返回目标</span></span><br><span class="line">            attackTarget = target;</span><br><span class="line">            <span class="comment">// 使用协程</span></span><br><span class="line">             StartCoroutine(MoveToAttackTarget());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用协程</span></span><br><span class="line">    <span class="function">IEnumerator <span class="title">MoveToAttackTarget</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        agent.isStopped = <span class="literal">false</span>;</span><br><span class="line">        <span class="comment">// 首先将Player转向目标方向</span></span><br><span class="line">        transform.LookAt(attackTarget.transform);</span><br><span class="line"><span class="keyword">while</span>(Vector3.Distance(transform.position,attackTarget.transform.position) &gt; <span class="number">1</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            agent.destination = attackTarget.transform.position;</span><br><span class="line">            <span class="keyword">yield</span> <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        agent.isStopped = <span class="literal">true</span>;</span><br><span class="line">        <span class="comment">//Attack</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(lastAttackTime &lt; <span class="number">0</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            anim.SetTrigger(<span class="string">&quot;Attack&quot;</span>);</span><br><span class="line">            lastAttackTime = <span class="number">0.5f</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">MoveToTarget</span>(<span class="params">Vector3 target</span>)</span>&#123;</span><br><span class="line">    <span class="comment">// 打断协程</span></span><br><span class="line">        StopAllCoroutines();</span><br><span class="line">        agent.isStopped = <span class="literal">false</span>;</span><br><span class="line">        agent.destination = target;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></div>
</li>
<li><p>但是以上会存在一些问题，由于<strong>全局的MouseManger</strong>会在<strong>点击鼠标时触发OnMouseClicked和OnEnemyClicked的其中一个</strong>函数。</p>
<p>在OnEnemyClicked被触发的时候，Player会一直移动到敌方的位置，并且不可打断。</p>
<p>因为这时候已经开始调用协程了。在OnMouseClicked的MoveToTarget函数里面使用**StopAllCoroutines()**就可以打断协程。完成攻击时候的其他位置移动了。</p>
</li>
</ul>
<h3 id="2、-敌人追击-1"><a href="#2、-敌人追击-1" class="headerlink" title="2、 敌人追击"></a>2、 敌人追击</h3><div class="highlight-container" data-rel="C#"><figure class="iseeu highlight c#"><table><tr><td class="code"><pre><span class="line">[<span class="meta">Header(<span class="string">&quot;Basic Settings&quot;</span>)</span>]</span><br><span class="line"><span class="keyword">public</span> <span class="built_in">float</span> sightRadius;</span><br><span class="line"><span class="keyword">public</span> <span class="built_in">bool</span> isGuard;</span><br><span class="line"><span class="keyword">private</span> <span class="built_in">float</span> speed;</span><br><span class="line"><span class="keyword">public</span> GameObject attackTatget;</span><br><span class="line"></span><br><span class="line"><span class="comment">// bool 配合动画</span></span><br><span class="line"><span class="built_in">bool</span> isWalk;</span><br><span class="line"><span class="built_in">bool</span> isChase;</span><br><span class="line"><span class="built_in">bool</span> isFollow;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Awake</span>()</span></span><br><span class="line">&#123;</span><br><span class="line">    agent = GetComponent&lt;UnityEngine.AI.NavMeshAgent&gt;();</span><br><span class="line">    speed = agent.speed;</span><br><span class="line">    anim = GetComponent&lt;Animator&gt;();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Update</span>()</span></span><br><span class="line">&#123;</span><br><span class="line">    SwitchStates();</span><br><span class="line">    SwitchAnimation();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">SwitchAnimation</span>()</span></span><br><span class="line">&#123;</span><br><span class="line">    anim.SetBool(<span class="string">&quot;Walk&quot;</span>,isWalk);</span><br><span class="line">    anim.SetBool(<span class="string">&quot;Chase&quot;</span>,isChase);</span><br><span class="line">    anim.SetBool(<span class="string">&quot;Follow&quot;</span>,isFollow);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">SwitchStates</span>()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">// 如果发现player就切换CHASE</span></span><br><span class="line">    <span class="keyword">if</span>(FoundPlayer())</span><br><span class="line">    &#123;</span><br><span class="line">        enemystates = EnemyStates.CHASE;</span><br><span class="line">        <span class="comment">// Debug.Log(&quot;Find Player&quot;);</span></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">switch</span>(enemystates)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">case</span> EnemyStates.GUARD:</span><br><span class="line"></span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> EnemyStates.PATROL:</span><br><span class="line"></span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> EnemyStates.CHASE:</span><br><span class="line">            <span class="comment">// <span class="doctag">TODO:</span> 追Player</span></span><br><span class="line"></span><br><span class="line">            <span class="comment">// <span class="doctag">TODO:</span> 在攻击范围内则攻击</span></span><br><span class="line">            <span class="comment">// <span class="doctag">TODO:</span> 配合动画</span></span><br><span class="line">            isWalk = <span class="literal">false</span>;</span><br><span class="line">            isChase = <span class="literal">true</span>;</span><br><span class="line">            agent.speed = speed;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span>(!FoundPlayer())</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="comment">// <span class="doctag">TODO:</span> 拉回上一个状态</span></span><br><span class="line">                isFollow = <span class="literal">false</span>;</span><br><span class="line">                agent.detination = transform.position;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span>&#123;</span><br><span class="line">                isFollow = <span class="literal">true</span>;</span><br><span class="line">                agent.destination = attackTatget.transform.position;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> EnemyStates.DEAD:</span><br><span class="line"></span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 敌人巡逻查找敌人追击</span></span><br><span class="line"><span class="function"><span class="built_in">bool</span> <span class="title">FoundPlayer</span>()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">var</span> colliders = Physics.OverlapSphere(transform.position,sightRadius);</span><br><span class="line">    <span class="keyword">foreach</span> (<span class="keyword">var</span> target <span class="keyword">in</span> colliders)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(target.CompareTag(<span class="string">&quot;Player&quot;</span>))</span><br><span class="line">        &#123;</span><br><span class="line">            attackTatget = target.gameObject;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    attackTatget = <span class="literal">null</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<h3 id="3、敌人的巡逻移动-1"><a href="#3、敌人的巡逻移动-1" class="headerlink" title="3、敌人的巡逻移动"></a>3、敌人的巡逻移动</h3><p>为了更好的可视化变量范围，使用代码：</p>
<div class="highlight-container" data-rel="C#"><figure class="iseeu highlight c#"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">OnDrawGizmosSelected</span>()</span>&#123;</span><br><span class="line">    Gizmos.color = Color.blue;</span><br><span class="line">    Gizmos.DrawWireSphere(transform.position,sightRadius);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="E:\project\Hexo\source\images\Unity3D\image-20230908220958406.png"
                      alt="image-20230908220958406"
                ></p>
<p>每次都在Patrol的范围内随机选择一个点进行移动，但是可能会跑出去。每次都在新的位置的Patrol范围内移动。</p>
<div class="highlight-container" data-rel="C#"><figure class="iseeu highlight c#"><table><tr><td class="code"><pre><span class="line">[<span class="meta">Header(<span class="string">&quot;Patrol State&quot;</span>)</span>]</span><br><span class="line"><span class="keyword">public</span> <span class="built_in">float</span> patrolRange;</span><br><span class="line"><span class="keyword">private</span> Vector3 wayPoint;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Start</span>()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span>(isGuard)&#123;</span><br><span class="line">        enemystates = EnemyStates.GUARD;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span>&#123;</span><br><span class="line">        enemystates = EnemyStates.PATROL;</span><br><span class="line">        GetNewWayPoint();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">GetNewWayPoint</span>()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">float</span> randomX = Random.Range(-patrolRange,patrolRange);</span><br><span class="line">    <span class="built_in">float</span> randomZ = Random.Range(-patrolRange,patrolRange);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 修改前</span></span><br><span class="line">    <span class="comment">//Vector3 randomPoint = new Vector3(transform.position.x + randomX,</span></span><br><span class="line">                                      <span class="comment">//transform.position.y,transform.position.z + randomZ);</span></span><br><span class="line">    <span class="comment">//修改后:</span></span><br><span class="line">            Vector3 randomPoint = <span class="keyword">new</span> Vector3(guardPos.x + randomX,</span><br><span class="line">        transform.position.y,guardPos.z + randomZ);</span><br><span class="line">    <span class="comment">//FIXME : 可能出现问题</span></span><br><span class="line">    wayPoint = randomPoint;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">switch</span>(enemystates)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">case</span> EnemyStates.GUARD:</span><br><span class="line"></span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> EnemyStates.PATROL:</span><br><span class="line">        isChase = <span class="literal">false</span>;</span><br><span class="line">        agent.speed = speed * <span class="number">0.5f</span>;</span><br><span class="line">        <span class="keyword">if</span>(Vector3.Distance(wayPoint,transform.position) &lt;= agent.stoppingDistance)&#123;</span><br><span class="line"></span><br><span class="line">            isWalk = <span class="literal">false</span>;</span><br><span class="line">            GetNewWayPoint();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span>&#123;</span><br><span class="line">            isWalk = <span class="literal">true</span>;</span><br><span class="line">            agent.destination = wayPoint;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> EnemyStates.CHASE:</span><br><span class="line">        <span class="comment">// <span class="doctag">TODO:</span> 追Player</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// <span class="doctag">TODO:</span> 在攻击范围内则攻击</span></span><br><span class="line">        <span class="comment">// <span class="doctag">TODO:</span> 配合动画</span></span><br><span class="line">        isWalk = <span class="literal">false</span>;</span><br><span class="line">        isChase = <span class="literal">true</span>;</span><br><span class="line">        agent.speed = speed;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(!FoundPlayer())</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">// <span class="doctag">TODO:</span> 拉回上一个状态</span></span><br><span class="line">            isFollow = <span class="literal">false</span>;</span><br><span class="line">            agent.destination = transform.position;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span>&#123;</span><br><span class="line">            isFollow = <span class="literal">true</span>;</span><br><span class="line">            agent.destination = attackTatget.transform.position;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> EnemyStates.DEAD:</span><br><span class="line"></span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>

<p>但是以上会出现，如果随机选中到了不可能移动的点，就会卡在那里。</p>
<ul>
<li>所以需要使用NavMeshSample，只在导航地图中采样。</li>
</ul>
<div class="highlight-container" data-rel="C#"><figure class="iseeu highlight c#"><table><tr><td class="code"><pre><span class="line"> <span class="function"><span class="keyword">void</span> <span class="title">GetNewWayPoint</span>()</span></span><br><span class="line">    &#123;   </span><br><span class="line">        remainLookAtTime = lookAtTime;</span><br><span class="line">        <span class="built_in">float</span> randomX = Random.Range(-patrolRange,patrolRange);</span><br><span class="line">        <span class="built_in">float</span> randomZ = Random.Range(-patrolRange,patrolRange);</span><br><span class="line"></span><br><span class="line">        Vector3 randomPoint = <span class="keyword">new</span> Vector3(guardPos.x + randomX,transform.position.y,guardPos.z + randomZ);</span><br><span class="line">        <span class="comment">//FIXME : 可能出现问题</span></span><br><span class="line">        <span class="comment">// wayPoint = randomPoint;</span></span><br><span class="line">        UnityEngine.AI.NavMeshHit hit;</span><br><span class="line">        <span class="comment">// 只在导航地图中采样</span></span><br><span class="line">        wayPoint = UnityEngine.AI.NavMesh.SamplePosition(randomPoint,<span class="keyword">out</span> hit,patrolRange,<span class="number">1</span>) ? hit.position:transform.position;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">case</span> EnemyStates.PATROL:</span><br><span class="line">isChase = <span class="literal">false</span>;</span><br><span class="line">agent.speed = speed * <span class="number">0.5f</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 判断是否到了随机巡逻点</span></span><br><span class="line"><span class="keyword">if</span>(Vector3.Distance(wayPoint,transform.position) &lt;= agent.stoppingDistance)&#123;</span><br><span class="line">    isWalk = <span class="literal">false</span>;</span><br><span class="line">    <span class="keyword">if</span>(remainLookAtTime &gt;<span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        remainLookAtTime -= Time.deltaTime;</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        GetNewWayPoint();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line">    isWalk = <span class="literal">true</span>;</span><br><span class="line">    agent.destination = wayPoint;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">break</span>;</span><br></pre></td></tr></table></figure></div>

<p>现在是脱战后在原地不动，需要改成脱战后巡逻：</p>
<div class="highlight-container" data-rel="C#"><figure class="iseeu highlight c#"><table><tr><td class="code"><pre><span class="line"><span class="keyword">case</span> EnemyStates.CHASE:</span><br><span class="line"><span class="comment">// <span class="doctag">TODO:</span> 追Player</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// <span class="doctag">TODO:</span> 在攻击范围内则攻击</span></span><br><span class="line"><span class="comment">// <span class="doctag">TODO:</span> 配合动画</span></span><br><span class="line">isWalk = <span class="literal">false</span>;</span><br><span class="line">isChase = <span class="literal">true</span>;</span><br><span class="line">agent.speed = speed;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(!FoundPlayer())</span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">// <span class="doctag">TODO:</span> 拉回上一个状态</span></span><br><span class="line">    isFollow = <span class="literal">false</span>;</span><br><span class="line">    <span class="keyword">if</span>(remainLookAtTime &gt; <span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        agent.destination = transform.position;</span><br><span class="line">        remainLookAtTime -= Time.deltaTime;</span><br><span class="line">    &#125;<span class="keyword">else</span> <span class="keyword">if</span>(isGuard)&#123;</span><br><span class="line">        enemystates = EnemyStates.GUARD;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span>&#123;</span><br><span class="line">        enemystates = EnemyStates.PATROL;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line">    isFollow = <span class="literal">true</span>;</span><br><span class="line">    agent.destination = attackTatget.transform.position;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">break</span>;</span><br></pre></td></tr></table></figure></div>



<h2 id="十一、数据分离（状态存储）-1"><a href="#十一、数据分离（状态存储）-1" class="headerlink" title="十一、数据分离（状态存储）"></a>十一、数据分离（状态存储）</h2><h3 id="1、人物基本数值-1"><a href="#1、人物基本数值-1" class="headerlink" title="1、人物基本数值"></a>1、人物基本数值</h3><ol>
<li><p>创建状态文件夹Characters stats</p>
<ul>
<li>MonoBehavior:</li>
<li>ScriptableObject:</li>
</ul>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="E:\project\Hexo\source\images\Unity3D\image-20230909134034306.png"
                      alt="image-20230909134034306"
                ></p>
<p><strong>CharacterData_SO设置好代码后可以在Create菜单中显示</strong>，将代码中设置基本的HP属性，并在Create中创建Player Data。</p>
<div class="highlight-container" data-rel="C#"><figure class="iseeu highlight c#"><table><tr><td class="code"><pre><span class="line"><span class="keyword">using</span> System.Collections;</span><br><span class="line"><span class="keyword">using</span> System.Collections.Generic;</span><br><span class="line"><span class="keyword">using</span> UnityEngine;</span><br><span class="line"></span><br><span class="line">[<span class="meta">CreateAssetMenu(fileName = <span class="string">&quot;New Data&quot;</span>,menuName = <span class="string">&quot;Character Stats/Data&quot;</span>)</span>]</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">CharacterData_SO</span> : <span class="title">ScriptableObject</span></span><br><span class="line">&#123;</span><br><span class="line">    [<span class="meta">Header(<span class="string">&quot;Stats Info&quot;</span>)</span>]</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">int</span> maxHealth;</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">int</span> currentHealth;</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">int</span> baseDefence;</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">int</span> currentDefence;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>


</li>
<li><p>在MonoBehavior下<strong>创建CharacterStats脚本</strong>，<strong>用于挂载CharacterData_SO（这个类没有继承MonoBehavior没法进行挂载）</strong></p>
<div class="highlight-container" data-rel="C#"><figure class="iseeu highlight c#"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 大括号里有一个get表示这个变量可以get不能set。如果既有get又有set表示变量两个都可以</span></span><br><span class="line"><span class="keyword">public</span> <span class="built_in">int</span> MaxHealth&#123;</span><br><span class="line">    <span class="keyword">get</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(characterData != <span class="literal">null</span>)</span><br><span class="line">            <span class="keyword">return</span> characterData.maxHealth;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">set</span>&#123;</span><br><span class="line">        characterData.maxHealth = <span class="keyword">value</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>


</li>
<li><p>最后<strong>将CharacterStats脚本挂载到Player和Slime</strong>上，再<strong>赋值相应的数据文件</strong>。可以实现数据设置和角色分离</p>
</li>
</ol>
<h3 id="2、攻击数值-1"><a href="#2、攻击数值-1" class="headerlink" title="2、攻击数值"></a>2、攻击数值</h3><div class="highlight-container" data-rel="C#"><figure class="iseeu highlight c#"><table><tr><td class="code"><pre><span class="line"> <span class="keyword">case</span> EnemyStates.CHASE:</span><br><span class="line"><span class="comment">// <span class="doctag">TODO:</span> 配合动画</span></span><br><span class="line">isWalk = <span class="literal">false</span>;</span><br><span class="line">isChase = <span class="literal">true</span>;</span><br><span class="line">agent.speed = speed;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(!FoundPlayer())</span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">// <span class="doctag">TODO:</span> 拉回上一个状态</span></span><br><span class="line">    isFollow = <span class="literal">false</span>;</span><br><span class="line">    <span class="keyword">if</span>(remainLookAtTime &gt; <span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        agent.destination = transform.position;</span><br><span class="line">        remainLookAtTime -= Time.deltaTime;</span><br><span class="line">    &#125;<span class="keyword">else</span> <span class="keyword">if</span>(isGuard)&#123;</span><br><span class="line">        enemystates = EnemyStates.GUARD;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span>&#123;</span><br><span class="line">        enemystates = EnemyStates.PATROL;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line">    isFollow = <span class="literal">true</span>;</span><br><span class="line">    agent.isStopped = <span class="literal">false</span>;</span><br><span class="line">    agent.destination = attackTatget.transform.position;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// <span class="doctag">TODO:</span> 在攻击范围内则攻击</span></span><br><span class="line"><span class="keyword">if</span>(TargetInAttackRange() || TargetInSkillRange())</span><br><span class="line">&#123;</span><br><span class="line">    isFollow = <span class="literal">false</span>;</span><br><span class="line">    agent.isStopped = <span class="literal">true</span>;</span><br><span class="line">    <span class="keyword">if</span>(lastAttackTime &lt; <span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        lastAttackTime = characterStats.attackData.coolDown;</span><br><span class="line">        <span class="comment">// 暴击判断</span></span><br><span class="line">        characterStats.isCritical = Random.<span class="keyword">value</span>  &lt; characterStats.attackData.criticalChance;</span><br><span class="line">        <span class="comment">// 执行攻击</span></span><br><span class="line">        Attack();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Attack</span>()</span></span><br><span class="line">&#123;</span><br><span class="line">    transform.LookAt(attackTatget.transform);</span><br><span class="line">    <span class="keyword">if</span>(TargetInAttackRange())</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">// 近身攻击动画</span></span><br><span class="line">        anim.SetTrigger(<span class="string">&quot;Attack&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(TargetInSkillRange())</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">// 技能攻击动画</span></span><br><span class="line">        anim.SetTrigger(<span class="string">&quot;Skill&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="built_in">bool</span> <span class="title">TargetInAttackRange</span>()</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(attackTatget != <span class="literal">null</span>)</span><br><span class="line">        <span class="keyword">return</span> Vector3.Distance(attackTatget.transform.position,transform.position) &lt;= characterStats.attackData.attackRange;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="built_in">bool</span> <span class="title">TargetInSkillRange</span>()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span>(attackTatget != <span class="literal">null</span>)</span><br><span class="line">        <span class="keyword">return</span> Vector3.Distance(attackTatget.transform.position,transform.position) &lt;= characterStats.attackData.skillRange;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>



<h2 id="十二、实现伤害函数-1"><a href="#十二、实现伤害函数-1" class="headerlink" title="十二、实现伤害函数"></a>十二、实现伤害函数</h2><ol>
<li><p>在CharcterStats中实现TakeDamage函数()</p>
<div class="highlight-container" data-rel="C#"><figure class="iseeu highlight c#"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">TakeDamage</span>(<span class="params">CharacterStats attacker,CharacterStats defener</span>)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">int</span> damage = Mathf.Max(attacker.CurrentDamage() - defener.currentDefence,<span class="number">0</span>);</span><br><span class="line">currentHealth = Mathf.Max(currentHealth - damage,<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// <span class="doctag">TODO:</span> update UI</span></span><br><span class="line"><span class="comment">// <span class="doctag">TODO:</span> 经验update</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="built_in">int</span> <span class="title">CurrentDamage</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">float</span> coreDamage = UnityEngine.Random.Range(attackData.minDamage,attackData.maxDamage);</span><br><span class="line">        <span class="keyword">if</span>(isCritical) &#123;</span><br><span class="line">            coreDamage *= attackData.criticalMultiplier;</span><br><span class="line">            Debug.Log(<span class="string">&quot;暴击！&quot;</span> + coreDamage);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> (<span class="built_in">int</span>) coreDamage;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></div>


</li>
<li><p>在Player和Enemy的Controller中实现伤害函数Hit</p>
<ul>
<li>PlayerController</li>
</ul>
<div class="highlight-container" data-rel="C#"><figure class="iseeu highlight c#"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Animation Event</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Hit</span>()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">var</span> targetStats = attackTarget.GetComponent&lt;CharacterStats&gt;();</span><br><span class="line">    targetStats.TakeDamage(characterStats,targetStats);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<ul>
<li>EnemyController:</li>
</ul>
<div class="highlight-container" data-rel="C#"><figure class="iseeu highlight c#"><table><tr><td class="code"><pre><span class="line">   </span><br></pre></td></tr></table></figure></div>


</li>
<li><p>找到伤害动画位置，打开WIndow -&gt; Animation -&gt;Animation 的Attack动画中的一帧，在此增加一个关键帧，并选择HIt函数</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="E:\project\Hexo\source\images\Unity3D\image-20230909194442214.png"
                      alt="image-20230909194442214"
                ></p>
<p><strong>如果Enemy的动画都是只读的</strong>，需要在Project文件夹中，将相应的动画进行ctrl+d复制，并放在自己的文件夹下，这时候就能修改了。</p>
</li>
</ol>
<h2 id="十三、敌人的守卫和死亡模式-1"><a href="#十三、敌人的守卫和死亡模式-1" class="headerlink" title="十三、敌人的守卫和死亡模式"></a>十三、敌人的守卫和死亡模式</h2><p>请注意每次试玩之前要把所有Data里面的数据还原</p>
<h3 id="1、回到守卫模式-1"><a href="#1、回到守卫模式-1" class="headerlink" title="1、回到守卫模式"></a>1、回到守卫模式</h3><ul>
<li>计算<strong>当前位置和守卫位置的距离</strong>，然后将导航终点设置为守卫位置，一旦小于停止距离就暂停</li>
</ul>
<p>（计算距离而言<strong>SqrMagnitude和Distance的性能开销</strong>在小项目相差不大，实际上是前者开销更小）</p>
<div class="highlight-container" data-rel="C#"><figure class="iseeu highlight c#"><table><tr><td class="code"><pre><span class="line"><span class="keyword">case</span> EnemyStates.GUARD:</span><br><span class="line">isChase = <span class="literal">false</span>;</span><br><span class="line"><span class="keyword">if</span>(transform.position != guardPos)</span><br><span class="line">&#123;</span><br><span class="line">isWalk = <span class="literal">true</span>;</span><br><span class="line">agent.isStopped  = <span class="literal">false</span>;</span><br><span class="line">agent.destination = guardPos;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(Vector3.SqrMagnitude(guardPos - transform.position) &lt;= agent.stoppingDistance)&#123;</span><br><span class="line">isWalk = <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">break</span>;</span><br></pre></td></tr></table></figure></div>

<ul>
<li><strong>但是这里守卫敌人虽然能够回去，角度却是背对我们的，需要将角度转回来。</strong></li>
</ul>
<p>Unity当中rotation的参数数值使用的是<strong>四元数Quaternion</strong></p>
<div class="highlight-container" data-rel="C#"><figure class="iseeu highlight c#"><table><tr><td class="code"><pre><span class="line"><span class="keyword">case</span> EnemyStates.GUARD:</span><br><span class="line">isChase = <span class="literal">false</span>;</span><br><span class="line"><span class="keyword">if</span>(transform.position != guardPos)</span><br><span class="line">&#123;</span><br><span class="line">    isWalk = <span class="literal">true</span>;</span><br><span class="line">    agent.isStopped  = <span class="literal">false</span>;</span><br><span class="line">    agent.destination = guardPos;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(Vector3.SqrMagnitude(guardPos - transform.position) &lt;= agent.stoppingDistance)&#123;</span><br><span class="line">        isWalk = <span class="literal">false</span>;</span><br><span class="line">        <span class="comment">// 使用Lerp让旋转慢慢转回去，0.01f是旋转的程度，范围为[0,1]</span></span><br><span class="line">        transform.rotation = Quaternion.Lerp(transform.rotation,guardRotation,<span class="number">0.01f</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">break</span>;</span><br></pre></td></tr></table></figure></div>

<h3 id="2、设置死亡动画-1"><a href="#2、设置死亡动画-1" class="headerlink" title="2、设置死亡动画"></a>2、设置死亡动画</h3><p>在Slime的Animator中<strong>增加一个Death Layer层，并将层的权重设置为1.（注意，一定要将层的权重设置为1）</strong>。记得将Can Transition Self取消勾选，不然会一直重复播放死亡。</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="E:\project\Hexo\source\images\Unity3D\image-20230910150134903.png"
                      alt="image-20230910150134903"
                ></p>
<div class="highlight-container" data-rel="C#"><figure class="iseeu highlight c#"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Dead 状态下的代码</span></span><br><span class="line"><span class="keyword">case</span> EnemyStates.DEAD:</span><br><span class="line">	<span class="comment">// 需要确保Box Collider或者Capsule Collier关闭，这样Player就无法再Enemy死亡后进行攻击判断（因为攻击判断的时候是判断了Tag是Enemy并且有碰撞体Collider）</span></span><br><span class="line">	<span class="comment">// 代码执行顺序还是很重要的，如果执行出来的效果和想象的不一样，可能是顺序问题。</span></span><br><span class="line">    coll.enabled = <span class="literal">false</span>;</span><br><span class="line">    agent.enabled = <span class="literal">false</span>;</span><br><span class="line">    Destroy(gameObject,<span class="number">2.0f</span>);</span><br><span class="line"><span class="keyword">break</span>;</span><br></pre></td></tr></table></figure></div>

<p>存一下MouseManger代码的备份，因为下面泛式单例模式会修改：</p>
<div class="highlight-container" data-rel="C#"><figure class="iseeu highlight c#"><table><tr><td class="code"><pre><span class="line"><span class="keyword">using</span> System.Collections;</span><br><span class="line"><span class="keyword">using</span> System.Collections.Generic;</span><br><span class="line"><span class="keyword">using</span> UnityEngine;</span><br><span class="line"><span class="keyword">using</span> UnityEngine.Events;</span><br><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"></span><br><span class="line"><span class="comment">// [System.Serializable]</span></span><br><span class="line"><span class="comment">// public class EventVector3 : UnityEvent&lt;Vector3&gt;&#123;</span></span><br><span class="line"><span class="comment">// &#125;</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">MouseManager</span> : <span class="title">MonoBehaviour</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> MouseManager Instance;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">event</span> Action&lt;Vector3&gt; OnMouseClicked;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">event</span> Action&lt;GameObject&gt; OnEnemyClicked;</span><br><span class="line">    <span class="keyword">public</span> Texture2D point,doorway,attack,target,arrow;</span><br><span class="line">    RaycastHit hitInfo;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">Awake</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(Instance != <span class="literal">null</span>)</span><br><span class="line">            Destroy(gameObject);</span><br><span class="line">        Instance = <span class="keyword">this</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Update is called once per frame</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">Update</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        SetCursorTexture();</span><br><span class="line">        MouseControl();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">SetCursorTexture</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        Ray ray = Camera.main.ScreenPointToRay(Input.mousePosition);</span><br><span class="line">        <span class="keyword">if</span>(Physics.Raycast(ray, <span class="keyword">out</span> hitInfo))&#123;</span><br><span class="line">            <span class="comment">// 切换鼠标贴图</span></span><br><span class="line">            <span class="keyword">switch</span>(hitInfo.collider.gameObject.tag)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">case</span> <span class="string">&quot;Ground&quot;</span>:</span><br><span class="line">                Cursor.SetCursor(target,<span class="keyword">new</span> Vector2(<span class="number">16</span>,<span class="number">16</span>),CursorMode.Auto);<span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> <span class="string">&quot;Enemy&quot;</span>:</span><br><span class="line">                Cursor.SetCursor(attack,<span class="keyword">new</span> Vector2(<span class="number">16</span>,<span class="number">16</span>),CursorMode.Auto);<span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">MouseControl</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">// 鼠标左键为0,并且点击不为空</span></span><br><span class="line">        <span class="keyword">if</span>(Input.GetMouseButtonDown(<span class="number">0</span>) &amp;&amp; hitInfo.collider != <span class="literal">null</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(hitInfo.collider.gameObject.CompareTag(<span class="string">&quot;Ground&quot;</span>))&#123;</span><br><span class="line">                OnMouseClicked?.Invoke(hitInfo.point);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(hitInfo.collider.gameObject.CompareTag(<span class="string">&quot;Enemy&quot;</span>))&#123;</span><br><span class="line">                OnEnemyClicked?.Invoke(hitInfo.collider.gameObject);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>



<h2 id="十四、泛型单例模式：GameManager控制游戏进度（Player死亡表示游戏结束）-1"><a href="#十四、泛型单例模式：GameManager控制游戏进度（Player死亡表示游戏结束）-1" class="headerlink" title="十四、泛型单例模式：GameManager控制游戏进度（Player死亡表示游戏结束）"></a>十四、泛型单例模式：GameManager控制游戏进度（Player死亡表示游戏结束）</h2><p>GameManager用于控制游戏进度，并且将设置成一个单例模式，但是每个都设置成单例模式会比较麻烦，所以需要设计一个泛型单例模式。然后将所有的Manager都继承于这个泛型单例。</p>
<ul>
<li>泛型类（基类）Singelton</li>
</ul>
<div class="highlight-container" data-rel="C#"><figure class="iseeu highlight c#"><table><tr><td class="code"><pre><span class="line"><span class="keyword">using</span> System.Collections;</span><br><span class="line"><span class="keyword">using</span> System.Collections.Generic;</span><br><span class="line"><span class="keyword">using</span> UnityEngine;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 第一个Singleton&lt;T&gt;表示他是一个泛型</span></span><br><span class="line"><span class="comment">// where T:Singleton&lt;T&gt;是对泛型T的约束，表示T必须是Singleton类的子类</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Singleton</span>&lt;<span class="title">T</span>&gt;: <span class="title">MonoBehaviour</span> <span class="keyword">where</span> <span class="title">T</span>:<span class="title">Singleton</span>&lt;<span class="title">T</span>&gt;</span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">// 单例模式的基础写法</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> T instance;</span><br><span class="line">    <span class="comment">// 由于instance标量是private，需要用Instance暴露给外界</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> T Instance&#123;</span><br><span class="line">        <span class="keyword">get</span>&#123;</span><br><span class="line">            <span class="keyword">return</span> instance;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 创建一个虚函数让子类的单例类继承后实现</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">Awake</span>()</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(instance != <span class="literal">null</span>)</span><br><span class="line">         &#123;   </span><br><span class="line">            Destroy(gameObject);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            instance = (T)<span class="keyword">this</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 创建一个布尔量判断instance是否为空</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="built_in">bool</span> IsInitalized&#123;</span><br><span class="line">        <span class="keyword">get</span>&#123;<span class="keyword">return</span> instance != <span class="literal">null</span>&#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">OnDestroy</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(instance == <span class="keyword">this</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            instance = <span class="literal">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

]]></content>
      <tags>
        <tag>Unity</tag>
      </tags>
  </entry>
</search>
